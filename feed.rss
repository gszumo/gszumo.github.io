<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>Gregg's MOTD</title><link>http://www.szumowski.org/index.html</link>
<description>Tips & Tricks that I've Encountered Over the Years...</description><language>en</language>
<lastBuildDate>Tue, 01 Aug 2023 17:56:10 -0400</lastBuildDate>
<pubDate>Tue, 01 Aug 2023 17:56:10 -0400</pubDate>
<atom:link href="http://www.szumowski.org/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Locking Down SSH User Access
</title><description><![CDATA[
<p>To secure your system, you shouldn’t allow root to login remotely.
Instead, if an admin needs to use the <em>root</em> account they should
login using their own account and then <code>su -</code> or
<code>sudo</code> to the <em>root</em> account as needed.</p>
<p>Edit the <code>/etc/ssh/sshd_config</code> file and change the
following lines:</p>
<blockquote>
<p><code>PermitRootLogin no</code><br/>
<code>PermitEmptyPasswords no</code><br/></p>
</blockquote>
<p>Some of these properties may be commented out in the file, so all
you’d need to do is remove the <em>#</em> sign.</p>
<p>Once these changes are made you should then restart ssh. On my system
this is done by:</p>
<blockquote>
<p><code># /etc/rc.d/rc.sshd restart</code><br/></p>
</blockquote>
<p>After the restart your changes will be in affect. However, root can
still login “from the local terminal”.</p>
<p>You can go a step further and restrict only specific users access to
login via ssh. For example, if you wanted only <em>user1</em> and
<em>user2</em> the ability to login with ssh you can add a line to the
above file:</p>
<blockquote>
<p><code>AllowUsers user1 user2</code><br/></p>
</blockquote>
<p>Everyone except these two users will be denied access via ssh.</p>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_ssh.html'>ssh</a>, <a href='tag_ssh-config.html'>ssh-config</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/locking-down-ssh-user-access947.html</link>
<guid>http://www.szumowski.org/./locking-down-ssh-user-access947.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Tue, 01 Aug 2023 17:56:03 -0400</pubDate></item>
<item><title>
Make a File Immutable
</title><description><![CDATA[
<p>You can use the <em>chattr</em> command (as <em>root</em>) to make a
file “unalterable” so that even the root user cannot modify or delete it
without using the <em>chattr</em> command to revert the change. This is
done by using <em>chattr</em>’s <code>+i</code> and <code>-i</code>
flags.</p>
<p><em>chattr</em> changes a file’s attributes on a Linux file
system.</p>
<p>Set the flag as root:</p>
<blockquote>
<p><code># chattr +i xrdp-notes.txt</code><br/>
<code># lsattr xrdp-notes.txt</code><br/>
<code>----i---------e------- xrdp-notes.txt</code><br/></p>
</blockquote>
<p>A normal user can’t delete it:</p>
<blockquote>
<p><code>$ rm xrdp-notes.txt</code><br/>
<code>rm: cannot remove 'xrdp-notes.txt': Operation not permitted</code><br/></p>
</blockquote>
<p>Even root cannot delete it without changing the file attribute
back:</p>
<blockquote>
<p><code># rm xrdp-notes.txt</code><br/>
<code>rm: cannot remove 'xrdp-notes.txt': Operation not permitted</code><br/></p>
</blockquote>
<p>Once the flag is unset it can be deleted:</p>
<blockquote>
<p><code># chattr -i xrdp-notes.txt</code><br/>
<code># lsattr xrdp-notes.txt</code><br/>
<code>--------------e------- xrdp-notes.txt</code><br/>
<code># exit</code><br/> <code>$ rm xrdp-notes.txt</code><br/>
<code>$</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_chattr.html'>chattr</a>, <a href='tag_lsattr.html'>lsattr</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/make-a-file-immutable19051.html</link>
<guid>http://www.szumowski.org/./make-a-file-immutable19051.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 31 Jul 2023 20:54:48 -0400</pubDate></item>
<item><title>
Set Mac Hostname
</title><description><![CDATA[
<p>To set the host name of your Mac (in my case macbook-pro) in the
command prompt, type the following command:</p>
<blockquote>
<p><code>$ sudo scutil --set HostName "macbook-pro"</code><br/>
<code>$ sudo scutil --set LocalHostName "macbook-pro"</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_macOS.html'>macOS</a>, <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/set-mac-hostname15613.html</link>
<guid>http://www.szumowski.org/./set-mac-hostname15613.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sun, 30 Jul 2023 15:45:42 -0400</pubDate></item>
<item><title>
Reset Mac Launchpad
</title><description><![CDATA[
<p>To reset the Mac LaunchPad to default enter the following:</p>
<blockquote>
<p><code>rm ~/Library/Application\ Support/Dock/*.db ; killall Dock</code><br/></p>
</blockquote>
<p>This will however put all of the Apple apps on the first page and all
of your remaining apps will be sorted alphabetically on the remaining
pages.</p>
<p>Tags: <a href='tag_macOS.html'>macOS</a>, <a href='tag_launchpad.html'>launchpad</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/reset-mac-launchpad.html</link>
<guid>http://www.szumowski.org/./reset-mac-launchpad.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 29 Jul 2023 20:53:43 -0400</pubDate></item>
<item><title>
Creating a Docker Registry
</title><description><![CDATA[
<p>Creating a docker registry is rather straightforward, but you may
need to do some <em>tweaking</em> of your docker installation in order
to get it working as indicated below.</p>
<p>Let’s assume that you already have docker up and running on your
machine.</p>
<p>We are going to set up a Docker registry on our local server. This
server will not have a secure connection and will only be used
internally, so we will need to allow this access by creating a file in
<code>/etc/docker</code> called <em>daemon.json</em> to designate
this:</p>
<blockquote>
<p><code>{</code><br/> <code>"insecure-registries":[</code><br/>
<code>"localhost:5000"</code><br/> <code>]</code><br/>
<code>}</code><br/></p>
</blockquote>
<p>Don’t forget to restart the docker daemon after making this
change.</p>
<p>Now, create a docker volume that will persist your registry data when
it goes offline:</p>
<blockquote>
<p><code># docker volume create /mnt/registry</code><br/></p>
</blockquote>
<p>This next part is optional. You can use whatever means you want to
download and start the container: Create a script to download the image
and start the container:</p>
<blockquote>
<p><code># mkdir /mnt/registry</code><br/>
<code># cat &gt;start-registry.sh &lt;&lt;"EOF"</code><br/>
<code>&gt; docker run -d \</code><br/>
<code>&gt;   -p 5000:5000 \</code><br/>
<code>&gt;   --restart=always \</code><br/>
<code>&gt;   --name registry \</code><br/>
<code>&gt;   -v /mnt/registry:/var/lib/registry \</code><br/>
<code>&gt;   registry:2</code><br/> <code>&gt; EOF</code><br/></p>
</blockquote>
<p>Now start the registry (using the above script):</p>
<blockquote>
<p><code># ./start-registry.sh</code><br/></p>
</blockquote>
<p>Now, let’s test it by pushing a sample <em>hello-world</em> image to
the registry:</p>
<blockquote>
<p><code>$ docker tag hello-world:latest localhost:5000/hello-world:latest</code><br/>
<code>$ docker push localhost:5000/hello-world:latest</code><br/>
<code>The push refers to repository [localhost:5000/hello-world]</code><br/>
<code>e07ee1baac5f: Pushed</code><br/>
<code>latest: digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 size: 525</code><br/></p>
</blockquote>
<p>NOTE: If you are pushing to this registry from another server you
need to add the following to <code>/etc/docker/daemon.json</code> and
restart <em>docker</em> before you will be able to do a <em>push</em>
(replace <em>localhost</em> with the IP address of the server that’s
running the registry):</p>
<blockquote>
<p><code>{</code><br/> <code>"insecure-registries":[</code><br/>
<code>"localhost:5000"</code><br/> <code>]</code><br/>
<code>}</code><br/></p>
</blockquote>
<p>Now we can use <em>curl</em> to list the repositories in the
registry:</p>
<blockquote>
<p><code>curl localhost:5000/v2/_catalog</code><br/></p>
</blockquote>
<p>More information about creating a <em>docker registry</em> can be
found <a
href="https://www.tutorialspoint.com/docker/docker_private_registries.htm">here</a>
and if you’re interested in setting up authentication for your private
registry you can find more information <a
href="https://www.baeldung.com/ops/docker-private-registry">here</a></p>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_docker.html'>docker</a>, <a href='tag_registry.html'>registry</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/creating-a-docker-registry8450.html</link>
<guid>http://www.szumowski.org/./creating-a-docker-registry8450.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Fri, 28 Jul 2023 19:48:04 -0400</pubDate></item>
<item><title>
Using rsync to Sync Two Directories
</title><description><![CDATA[
<p>You can sync two directories using <em>rsync</em> tool. The following
command:</p>
<blockquote>
<p><code>$ rsync -a -v --delete sending_directory target_directory;</code><br/></p>
</blockquote>
<p>will copy <em>sending_directory</em> to <em>target_directory</em>
creating a directory structure of
<em>sending_directory/target_directory</em>. The <code>--delete</code>
flag will ensure that any files that were previously in
<em>sending_directory/target_directory</em> that are not in
<em>sending_directory</em> will be deleted so that the contents of the
two directories are the same.</p>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_rsync.html'>rsync</a>, <a href='tag_backups.html'>backups</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/using-rsync-to-sync-two-directories17585.html</link>
<guid>http://www.szumowski.org/./using-rsync-to-sync-two-directories17585.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Thu, 27 Jul 2023 17:09:20 -0400</pubDate></item>
<item><title>
Move Files Older Than So Many Days with Find
</title><description><![CDATA[
<p>You may want to clean up a directory that has files older than a
certain number of days, for example, 30 days. You can do this with the
<em>find</em> command:</p>
<p>To move files older than 30 days in current folder to the
<em>old</em> folder:</p>
<blockquote>
<p><code>$ find . -mtime +30 -exec mv {} old/ \;</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_find.html'>find</a>, <a href='tag_mtime.html'>mtime</a>, <a href='tag_mv.html'>mv</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/move-files-older-than-so-many-days-with-find.html</link>
<guid>http://www.szumowski.org/./move-files-older-than-so-many-days-with-find.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Wed, 26 Jul 2023 17:08:26 -0400</pubDate></item>
<item><title>
Build, Tag, and Push a Docker Image with One Command
</title><description><![CDATA[
<p>You can build, tag, and push a docker image to a remote all in one
command with the –quiet parameter on docker build, which only outputs
the SHA256 hash (annoyingly prefixed with SHA256:, but nothing a little
cutting can’t fix).</p>
<blockquote>
<p><code>$ docker tag $(docker build . -q | cut -c 8-999) myregid/imagename:1.0.1 &amp;&amp; docker push myregid/imagename</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_docker.html'>docker</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/build-tag-and-push-a-docker-image-with-one-command.html</link>
<guid>http://www.szumowski.org/./build-tag-and-push-a-docker-image-with-one-command.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Tue, 25 Jul 2023 17:32:36 -0400</pubDate></item>
<item><title>
Vim Tips: Searching a File for Multiple Strings
</title><description><![CDATA[
<p>In Vim you can perform a search like this: /string1/;/string2</p>
<p>This will will combine two searches. It tells Vim:</p>
<ol type="1">
<li>Search for string1, then</li>
<li>From there search for string2 on any line that also contains
string1.</li>
</ol>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_vim.html'>vim</a>, <a href='tag_search.html'>search</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/vim-tips-searching-a-file-for-multiple-strings.html</link>
<guid>http://www.szumowski.org/./vim-tips-searching-a-file-for-multiple-strings.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 24 Jul 2023 20:35:18 -0400</pubDate></item>
<item><title>
Using RClone to Mount Your OneDrive Folder in Linux
</title><description><![CDATA[
<p>If you have a Microsoft Office 365 account you know that it comes
with 1TB of storage. You can use <em>RClone</em> to mount your
<em>OneDrive</em> locally on your Linux machine so that you can read and
write documents stored there.</p>
<ol type="1">
<li>Install <em>rclone</em> from whatever package repository that your
Linux operating system uses.</li>
<li>Follow the instructions <a
href="https://rclone.org/onedrive/">here</a> to configure your
<em>OneDrive</em> environment. The instructions are rather
straightforward and a couple pieces of extra advice follows:</li>
</ol>
<p>In the first section, type <code>n</code> for a <em>new</em>
installation and give your mountpoint a name:</p>
<blockquote>
<p><code>$ rclone config</code><br/>
<code>No remotes found - make a new one</code><br/>
<code>n) New remote</code><br/>
<code>s) Set configuration password</code><br/>
<code>q) Quit config</code><br/>
<code>n/s/q&gt;</code>n<code></code><br/>
<code>name&gt; remote</code><br/></p>
</blockquote>
<p>In the next section just press enter to accept the default:</p>
<blockquote>
<p><code>Type of storage to configure.</code><br/>
<code>Enter a string value. Press Enter for the default ("").</code><br/></p>
</blockquote>
<p>Now you have to choose the <em>vendor</em> of the service you’re
configuring. There are a lot of selections hereso just look for
<em>Microsoft OneDrive</em>, in my case it was <em>26</em>:</p>
<blockquote>
<p><code>Choose a number from below, or type in your own value</code><br/>
<code>1 / 1Fichier</code><br/> <code>\ "fichier"</code><br/>
<code>2 / Alias for an existing remote</code><br/>
<code>\ "alias"</code><br/> <code>etc.</code><br/>
<code>25 / Microsoft Azure Blob Storage</code><br/>
<code>\ "azureblob"</code><br/>
<code>26 / Microsoft OneDrive</code><br/> <code>\ "onedrive"</code><br/>
<code>27 / OpenDrive</code><br/> <code>\ "opendrive"</code><br/>
<code>28 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</code><br/>
<code>\ "swift"</code><br/> <code>Storage&gt; 26</code><br/></p>
</blockquote>
<p>The next couple of selections are just the default, so press the
<em>Enter</em> key:</p>
<blockquote>
<p><code>OAuth Client Id</code><br/>
<code>Leave blank normally.</code><br/>
<code>Enter a string value. Press Enter for the default ("").</code><br/>
<code>client_id&gt;</code><br/> <code>OAuth Client Secret</code><br/>
<code>Leave blank normally.</code><br/>
<code>Enter a string value. Press Enter for the default ("").</code><br/>
<code>client_secret&gt;</code><br/></p>
</blockquote>
<p>Now select the <em>global</em> choice:</p>
<blockquote>
<p><code>Choose national cloud region for OneDrive.</code><br/>
<code>Enter a string value. Press Enter for the default ("global").</code><br/>
<code>Choose a number from below, or type in your own value</code><br/>
<code>1 / Microsoft Cloud Global</code><br/>
<code>\ "global"</code><br/>
<code>2 / Microsoft Cloud for US Government</code><br/>
<code>\ "us"</code><br/> <code>3 / Microsoft Cloud Germany</code><br/>
<code>\ "de"</code><br/>
<code>4 / Azure and Office 365 operated by 21Vianet in China</code><br/>
<code>\ "cn"</code><br/> <code>region&gt; 1</code><br/></p>
</blockquote>
<p>Select the <em>default</em> here:</p>
<blockquote>
<p><code>Edit advanced config? (y/n)</code><br/>
<code>y) Yes</code><br/> <code>n) No (default)</code><br/>
<code>y/n&gt; n</code><br/></p>
</blockquote>
<p>Select the <em>default</em> here:</p>
<blockquote>
<p><code>Remote config</code><br/> <code>Use auto config?</code><br/>
<code>* Say Y if not sure</code><br/>
<code>* Say N if you are working on a remote or headless machine</code><br/>
<code>y) Yes (default)</code><br/> <code>n) No</code><br/>
<code>y/n&gt; y</code><br/></p>
</blockquote>
<p>Now the browser should open and you should provide your Microsoft
credentials:</p>
<blockquote>
<p><code>If your browser doesn't open automatically go to the following link: http://127.0.0.1:53682/auth?state=&lt;some long key here&gt;</code><br/>
<code></code><br/>
<code>Log in and authorize rclone for access</code><br/>
<code>Waiting for code...</code><br/> <code>Got code</code><br/></p>
</blockquote>
<p>Select <em>1</em> for <em>Personal or Business</em>:</p>
<blockquote>
<p><code>Choose a number from below, or type in an existing value</code><br/>
<code>1 / OneDrive Personal or Business</code><br/>
<code>\ "onedrive"</code><br/>
<code>2 / Root Sharepoint site</code><br/>
<code>\ "sharepoint"</code><br/>
<code>3 / Sharepoint site name or URL (e.g. mysite or https://contoso.sharepoint.com/sites/mysite)</code><br/>
<code>\ "url"</code><br/>
<code>4 / Search for a Sharepoint site</code><br/>
<code>\ "search"</code><br/>
<code>5 / Type in driveID (advanced)</code><br/>
<code>\ "driveid"</code><br/>
<code>6 / Type in SiteID (advanced)</code><br/>
<code>\ "siteid"</code><br/>
<code>7 / Sharepoint server-relative path (advanced, e.g. /teams/hr)</code><br/>
<code>\ "path"</code><br/> <code>Your choice&gt; 1</code><br/></p>
</blockquote>
<p>Select the drive number from the list, there will probably be only
one to choose from, and then select the default:</p>
<blockquote>
<p><code>Found 1 drives, please select the one you want to use:</code><br/>
<code>0:  (personal) id=&lt;id key&gt;</code><br/>
<code>Chose drive to use:&gt; 0</code><br/>
<code>Found drive 'root' of type 'personal', URL: https://onedrive.live.com/?cid=&lt;id key&gt;</code><br/>
<code>Is that okay?</code><br/> <code>y) Yes (default)</code><br/>
<code>n) No</code><br/> <code>y/n&gt; y</code><br/></p>
</blockquote>
<p>Now <em>rclone</em> will list out the configuration information and
ask for confirmation. If all looks good then select <em>y</em> and
you’re done:</p>
<blockquote>
<p><code>--------------------</code><br/> <code>[remote]</code><br/>
<code>type = onedrive</code><br/> <code>region = global</code><br/>
<code>token = &lt;some long token string here&gt;</code><br/>
<code></code><br/>
<code>drive_id = &lt;some long token string here&gt;</code><br/>
<code></code><br/> <code>drive_type = personal</code><br/>
<code>--------------------</code><br/>
<code>y) Yes this is OK (default)</code><br/>
<code>e) Edit this remote</code><br/>
<code>d) Delete this remote</code><br/> <code>y/e/d&gt; y</code><br/>
<code>Current remotes:</code><br/> <code></code><br/>
<code>Name                 Type</code><br/>
<code>====                 ====</code><br/>
<code>remote               onedrive</code><br/> <code></code><br/>
<code>e) Edit existing remote</code><br/>
<code>n) New remote</code><br/> <code>d) Delete remote</code><br/>
<code>r) Rename remote</code><br/> <code>c) Copy remote</code><br/>
<code>s) Set configuration password</code><br/>
<code>q) Quit config</code><br/>
<code>e/n/d/r/c/s/q&gt; q</code><br/></p>
</blockquote>
<ol start="3" type="1">
<li>Now you should be able to list the contents of the OneDrive
directory on the console:</li>
</ol>
<blockquote>
<p><code>$ rclone lsd remote:</code><br/>
<code>-1 2023-06-23 04:15:30         3 .Trash-1000</code><br/>
<code>-1 2023-07-23 15:21:03         1 Apps</code><br/>
<code>-1 2017-09-20 15:34:22         0 Attachments</code><br/>
<code>-1 2023-07-04 23:53:04         0 Desktop</code><br/>
<code>-1 2023-07-23 14:33:10       472 Documents</code><br/>
<code>-1 2023-07-22 02:43:07       135 Documents from Macbook</code><br/>
<code>-1 2019-11-08 21:22:23         0 Email attachments</code><br/>
<code>-1 2019-11-08 21:22:23         0 Movies</code><br/>
<code>-1 2023-07-23 03:39:57        53 Music</code><br/>
<code>-1 2023-07-02 16:34:04        37 Pictures</code><br/>
<code>-1 2022-05-24 10:39:02         2 Public</code><br/>
<code>-1 2021-08-01 13:47:30         2 SyncFusion</code><br/>
<code>-1 2023-06-20 11:41:24         4 Videos</code><br/></p>
</blockquote>
<p>If for some reason it isn’t mounted you can mount it manually with
the following command:</p>
<blockquote>
<p><code>$ rclone --vfs-cache-mode writes mount remote: ~/OneDrive &amp;</code><br/>
<code>[2] 69267</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_rclone.html'>rclone</a>, <a href='tag_onedrive.html'>onedrive</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/using-rclone-to-mount-your-onedrive-folder-in-linux4329.html</link>
<guid>http://www.szumowski.org/./using-rclone-to-mount-your-onedrive-folder-in-linux4329.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sun, 23 Jul 2023 16:26:09 -0400</pubDate></item>
</channel></rss>
