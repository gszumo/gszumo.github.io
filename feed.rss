<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>Gregg's MOTD</title><link>http://www.szumowski.org/index.html</link>
<description>Tips & Tricks that I've Encountered Over the Years...</description><language>en</language>
<lastBuildDate>Thu, 17 Aug 2023 17:28:30 -0400</lastBuildDate>
<pubDate>Thu, 17 Aug 2023 17:28:30 -0400</pubDate>
<atom:link href="http://www.szumowski.org/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Git Aliases
</title><description><![CDATA[
<p>Once you start developing some experience with using <em>git</em> on
the command line, you will sometimes find yourself typing some long
commands over and over again. You can create <em>aliases</em> in
<em>git</em> that are very similar to the <em>bash alias</em> shortcuts
you use in the shell.</p>
<p>Steps to do this are highlighted in chapter 2.7 of the <a
href="https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases">Git
Book</a> authored by Scott Chacon and Ben Straub and published by
Apress.</p>
<p>One of the commands that I use a lot is:</p>
<blockquote>
<p><code>$ git log --graph --decorate --pretty=oneline --abbrev-commit --all --date=local</code><br/></p>
</blockquote>
<p>which provides a nice colorized listing of the project’s activity and
looks something like this:</p>
<blockquote>
<p><code>*   2f6cc07 (HEAD -&gt; automation, origin/master, origin/HEAD, master) Updated merge for README.md</code><br/>
<code>|\</code><br/> <code>| * 84e20c2 Initial commit</code><br/>
<code>* 8dc456f Completed migration for github site.</code><br/>
<code>* bf67601 fixed head before sed</code><br/>
<code>*   89780c3 Merge pull request #124 from thalios1973/feat/pandoc-test-fix</code><br/>
<code>|\</code><br/>
<code>| * c9a297c Added additional check that will allow the use of pandoc without the --strict flag or 'hsmarkdown' hack.</code><br/>
<code>* |   025cf79 Merge pull request #125 from thalios1973/feat/body-end-file</code><br/>
<code>|\ \</code><br/> <code>| |/</code><br/> <code>|/|</code><br/>
<code>| * 272b1b6 Added ability to include custom code just before the &lt;/body&gt; tag. body_end_file global config variable added.</code><br/>
<code>|/</code><br/> <code>* 9f66ad0 README formatting</code><br/>
<code>* 500253e Support for static, not managed by bashblog html files. Close #92</code><br/>
<code>* 3c73ef6 Deleted the now defunct Twitter JSON API for share count. Fix #117</code><br/>
<code>* b5a4590 bump version to 2.8</code><br/>
<code>* 5c8e0e5 Revert changes in #116</code><br/>
<code>*   5fc037f Merge branch 'master' of github.com:cfenollosa/bashblog</code><br/>
<code>|\</code><br/>
<code>| * c6a9bef Revert tag management from #116</code><br/>
<code>| * 6222672 Better error message for $EDITOR. Close #112</code><br/>
<code>| * 36d79b5 support Markdown.pl in bashblog folder. Close #113</code><br/>
<code>| *   7154c07 Merge pull request #116 from McDutchie/master</code><br/>
<code>| |\</code><br/>
<code>| | * f50a17c tags_in_post(): bugfix for non-GNU 'sed'</code><br/>
<code>| | * 2a29b22 Fix renaming using 'bb.sh edit -n'. Suppress 'which' errmsg.</code><br/>
<code>| | *   62a26bb Merge remote-tracking branch 'upstream/master' Resolve minor editing 2.6-to-2.7 editing conflict in bb.sh</code><br/>
<code>| | |\</code><br/>
<code>| | * | 54cc0c8 More code refactoring. Limit word splitting and disable globbing by default.</code><br/>
<code>| | * |   d1a84d6 Merge remote-tracking branch 'upstream/master'</code><br/>
<code>| | |\ \</code><br/>
<code>| | * | | a674ec5 rebuild_tags(): use array for more robust file handling</code><br/>
<code>| * | | | 2157b92 Slavic language support, thanks to Tomasz Jadowski</code><br/>
<code>| | |_|/</code><br/> <code>| |/| |</code><br/></p>
</blockquote>
<p>but nicer than this website can depict (for now).</p>
<p>Rather than typing this long command every time, I just create an
alias:</p>
<blockquote>
<p><code>$ git config --global alias.lola 'log --graph --decorate --pretty=oneline --abbrev-commit --all --date=local'</code><br/></p>
</blockquote>
<p>Then all I need to type from now on is:</p>
<blockquote>
<p><code>$ git lola</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_git.html'>git</a>, <a href='tag_aliases.html'>aliases</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/git-aliases20780.html</link>
<guid>http://www.szumowski.org/./git-aliases20780.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Thu, 17 Aug 2023 17:28:22 -0400</pubDate></item>
<item><title>
Setting Up Git to Ignore ELF Binaries (C/C++ Output on Linux)
</title><description><![CDATA[
<p>The starting point for this experiment was from <a
href="https://stackoverflow.com/questions/5711120/gitignore-binary-files-that-have-no-extension">here</a></p>
<p><strong>An Example using C Program Source</strong></p>
<p>Let’s say we have a pre-existing directory of some C source code
files:</p>
<blockquote>
<p><code>$ ls</code><br/>
<code>Makefile  print  print.c  print.h  print.o</code><br/></p>
</blockquote>
<p>And we initialize a new git repository in that directory:</p>
<blockquote>
<p><code>$ git init</code><br/>
<code>Initialized empty Git repository in /home/user/tmp/printer/.git/</code><br/>
<code></code><br/> <code>$ cat .gitignore</code><br/>
<code># Ignore all</code><br/> <code>*</code><br/> <code></code><br/>
<code># Unignore all with extensions</code><br/> <code>!*.*</code><br/>
<code></code><br/> <code># Unignore all dirs</code><br/>
<code>!*/</code><br/> <code></code><br/>
<code># Unignore make files</code><br/> <code>!Makefile</code><br/>
<code></code><br/> <code># Ignore .o files</code><br/>
<code>*.o</code><br/> <code></code><br/>
<code># Ignore</code>bin<code>dir</code><br/> <code>bin/</code><br/>
<code># or</code><br/> <code>*/bin/*</code><br/></p>
</blockquote>
<p>Let’s see how we did:</p>
<blockquote>
<p><code>$ git status</code><br/> <code>On branch master</code><br/>
<code></code><br/> <code>No commits yet</code><br/> <code></code><br/>
<code>Untracked files:</code><br/>
<code>(use "git add &lt;file&gt;..." to include in what will be committed)</code><br/>
<code>.gitignore</code><br/> <code>Makefile</code><br/>
<code>print.c</code><br/> <code>print.h</code><br/> <code></code><br/>
<code>nothing added to commit but untracked files present (use "git add" to track)</code><br/></p>
</blockquote>
<p>So the <code>print</code> and the <code>print.o</code> files are not
showing up, which was our initial goal.</p>
<p>You may have to <em>tweak</em> the settings in the above
<code>.gitignore</code> file to your own situation, but as you can see
it is possible to setup <em>git</em> to ignore the ELF binaries output
by <em>gcc</em>. I would probably also add <code>a.out</code> to the
list of <em>unignored</em> files just to cover those times when you’re
not using a <code>Makefile</code>. YMMV.</p>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_git.html'>git</a>, <a href='tag_gcc.html'>gcc</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/setting-up-git-to-ignore-elf-binaries-cc-output-on-linux.html</link>
<guid>http://www.szumowski.org/./setting-up-git-to-ignore-elf-binaries-cc-output-on-linux.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Wed, 16 Aug 2023 17:01:04 -0400</pubDate></item>
<item><title>
Processing a List of Files from an Input File
</title><description><![CDATA[
<p>Suppose we have a list of files stored in a text file and we want to
perform an operation on each of them within a bash script. How would we
go about doing that? Well, there are several options, here are a
few.</p>
<blockquote>
<p><code>$ cat input-files.txt</code><br/> <code>file-1.txt</code><br/>
<code>file-2.txt</code><br/> <code>file-3.txt</code><br/>
<code>file-4.txt</code><br/> <code>file-5.txt</code><br/>
<code>file-6.txt</code><br/> <code>file-7.txt</code><br/>
<code>file-8.txt</code><br/> <code>file-9.txt</code><br/></p>
</blockquote>
<p>Now, if we want to operate on each file in this list we can do
something like this:</p>
<blockquote>
<p><code>while IFS= read -r filename</code><br/> <code>do</code><br/>
<code>echo "Do something on ${filename} here..."</code><br/>
<code>done &lt; "input-files.txt"</code><br/></p>
</blockquote>
<p>or alternatively,</p>
<blockquote>
<p><code>input="input-files.txt"</code><br/>
<code>while IFS= read -r filename</code><br/> <code>do</code><br/>
<code>printf '%s\n' "${filename}"</code><br/>
<code>done &lt; "${input}"</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_bash.html'>bash</a>, <a href='tag_shell-scripting.html'>shell-scripting</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/processing-a-list-of-files-from-an-input-file7025.html</link>
<guid>http://www.szumowski.org/./processing-a-list-of-files-from-an-input-file7025.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 14 Aug 2023 21:07:27 -0400</pubDate></item>
<item><title>
String Processing with Bash
</title><description><![CDATA[
<p>There are various tools built into <em>bash</em> that enable you to
manipulate a variable or string which come in handy when writing shell
scripts. Here are a few notable ones:</p>
<p><strong>Find the length of a string</strong></p>
<blockquote>
<p><code>${#string}</code><br/></p>
</blockquote>
<p><strong>Get a Substring from a String</strong></p>
<blockquote>
<p><code>${string:pos} or ${string:pos:len}</code><br/></p>
</blockquote>
<p><strong>Removing Substrings from a String</strong></p>
<blockquote>
<p><code>${string#substr}</code><br/> <code>${string%substr}</code><br/>
<code>${string##substr}</code><br/>
<code>${string%%substr}</code><br/></p>
</blockquote>
<p><strong>Some examples</strong></p>
<p>Here’s a few examples of how you can process a variable that points
to an absolute path of a file and shows how to extract certain parts of
said file’s path:</p>
<blockquote>
<p><code>var=/home/user/code/blogstuff/index.html.j2</code><br/>
<code>echo ${var}         # =&gt; /home/user/code/blogstuff/index.html.j2</code><br/>
<code>echo ${var#*.}      # =&gt; html.j2</code><br/>
<code>echo ${var##*.}     # =&gt; j2</code><br/>
<code>echo ${var%/*.*}    # =&gt; /home/user/code/blogstuff</code><br/></p>
</blockquote>
<p><strong>Replace a Substring of a String</strong></p>
<blockquote>
<p><code>${string/pattern/substr}  # =&gt; Replaces the 1st match found</code><br/>
<code>${string//pattern/substr} # =&gt; Replaces all of the matches found</code><br/></p>
</blockquote>
<p><strong>Replace the Beginning or End of a String</strong></p>
<blockquote>
<p><code>${string/#pattern/substr}</code><br/>
<code>${string/%pattern/substr}</code><br/>
<code>file=${var##/*/}          # =&gt; index.html.j2</code><br/>
<code>echo ${file/#index/fubar} # =&gt; fubar.html.j2</code><br/>
<code>echo ${file/%j2/fubar}    # =&gt; index.html.fubar</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_bash.html'>bash</a>, <a href='tag_shell-scripting.html'>shell-scripting</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/string-processing-with-bash16696.html</link>
<guid>http://www.szumowski.org/./string-processing-with-bash16696.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sun, 13 Aug 2023 21:01:43 -0400</pubDate></item>
<item><title>
Convert a Git Repo to a Bare Repo
</title><description><![CDATA[
<p>If you have a git repository that you haven’t cloned from a remote
location, i.e., one that was created locally, it is easy to convert it
to a <em>bare</em> repository. This process describes how to:</p>
<ol type="1">
<li>Take a “normal” git repository</li>
<li>Move the .git directory to another location</li>
<li>Convert it to a <em>bare</em> repository</li>
</ol>
<p>Suppose you have a git repository called <em>repo</em>. To convert it
to a <em>bare</em> repository, execute the following commands:</p>
<blockquote>
<p><code>cd repo</code><br/>
<code>mv .git ../repo.git # renaming just for clarity</code><br/>
<code>cd ..</code><br/> <code>rm -fr repo</code><br/>
<code>cd repo.git</code><br/>
<code>git config --bool core.bare true</code><br/></p>
</blockquote>
<p>Now you can clone it like a “normal” repository:</p>
<blockquote>
<p><code>$ cd ..</code><br/>
<code>$ git clone repo.git myrepo</code><br/>
<code>$ cd myrepo/</code><br/> <code>$ ls</code><br/>
<code>file-1.txt  file-2.txt  file-3.txt  file-4.txt  file-5.txt</code><br/>
<code>$ git status</code><br/> <code>On branch master</code><br/>
<code>Your branch is up to date with 'origin/master'.</code><br/>
<code></code><br/>
<code>nothing to commit, working tree clean</code><br/>
<code>$</code><br/></p>
</blockquote>
<p>Please note that repositories from a <em>remote</em> location do not
have all of their git branch contents and history stored locally, so
doing this to a repository cloned from a remote will result in a
repository that will be missing data.</p>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_git.html'>git</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/convert-a-git-repo-to-a-bare-repo.html</link>
<guid>http://www.szumowski.org/./convert-a-git-repo-to-a-bare-repo.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 12 Aug 2023 14:53:22 -0400</pubDate></item>
<item><title>
Git: Working with Git for the First Time
</title><description><![CDATA[
<p>Here’s the first step every user should start with after downloading
and installing git but <strong>BEFORE</strong> doing anything else: Set
up your <em>global</em> environment variables! If you don’t do this git
will abort your commit and give you an annoying message like this
one:</p>
<blockquote>
<p><code>$ git commit file.txt</code><br/>
<code>Author identity unknown</code><br/> <code></code><br/>
<code>*** Please tell me who you are.</code><br/> <code></code><br/>
<code>Run</code><br/> <code></code><br/>
<code>git config --global user.email "you@example.com"</code><br/>
<code>git config --global user.name "Your Name"</code><br/>
<code></code><br/>
<code>to set your account's default identity.</code><br/>
<code>Omit --global to set the identity only in this repository.</code><br/>
<code></code><br/>
<code>fatal: empty ident name (for &lt;user@localhost&gt;) not allowed</code><br/></p>
</blockquote>
<p>You only should have to do the <code>git config --global...</code>
commands one time. If you want to use a different user ID and email
address in each repository then don’t include the <code>--global</code>
parameter and it will only update your current repository leaving your
global setting alone. If you’re contributing to different repositories
using different email addresses or IDs then you definitely want to get
into this habit.</p>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_git.html'>git</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/git-working-with-git-for-the-first-time.html</link>
<guid>http://www.szumowski.org/./git-working-with-git-for-the-first-time.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Fri, 11 Aug 2023 18:04:10 -0400</pubDate></item>
<item><title>
Git: Committing to a Different Branch
</title><description><![CDATA[
<p>Let’s imaging that you’ve made some changes to files in your work
directory and then realized that you aren’t in the correct branch. Now
you want to get the changes you’ve made to the right branch but no
change the current branch. What do you do?</p>
<p>There is no <em>git</em> command to do this but you can use the
<em>git stash</em> command to fix this.</p>
<p>This involves:</p>
<ol type="1">
<li>Using the <em>git stash</em> command to temporarily store our
changes elsewhere,</li>
<li>Checkout the correct branch, and</li>
<li>“Unstash” the changes to the correct branch.</li>
</ol>
<p>Let’s say that we’ve made some changes in our repository’s
new-release branch but they should have been made in the new-feature
branch.</p>
<blockquote>
<p><code>git stash</code><br/>
<code>git checkout new-feature</code><br/>
<code>git stash pop</code><br/></p>
</blockquote>
<p>We can now perform a commit, and update this branch.</p>
<blockquote>
<p><code>git commit -a -m "Updated functions in new-feature branch."</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_git.html'>git</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/git-committing-to-a-different-branch12884.html</link>
<guid>http://www.szumowski.org/./git-committing-to-a-different-branch12884.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Thu, 10 Aug 2023 17:34:40 -0400</pubDate></item>
<item><title>
Printing from Virtualbox
</title><description><![CDATA[
<p>If you want to set up your system so that you can access your Linux
host’s printer from a Windows VirtualBox client then:</p>
<p><strong>On Your Linux Host</strong></p>
<ol type="1">
<li>Install your printer driver. Get your printer working on your host
first.</li>
<li>Install <em>CUPS</em> if it is not already installed.</li>
<li>Add your printer to <em>CUPS</em> at
<code>http://localhost:631/admin</code>.</li>
<li>Set your virtual machine’s Network to <em>Bridged Adapter
(eth0)</em> in Settings and connect the cable as necessary (Advanced
menu).<br />
</li>
<li>Startup VirtualBox.<br />
</li>
<li>In a terminal, enter <code>ifconfig</code> to list your current
network settings and copy down your host’s (eth0) address or you can
optionally access this address using Network Manager.</li>
</ol>
<p><strong>On You Windows Client</strong></p>
<ol type="1">
<li>Add a new Network printer in “<em>Printers and Faxes</em>” from the
<em>Control Panel</em></li>
<li>Enter the URL address of your host’s printer, i.e.,
<code>http://192.168.0.2:631/printers/Your_printer's_name</code>. You
need the <code>:631</code> after your host’s address as this is the port
that <em>CUPS</em> listens to. The <em>Your_printer’s_name</em> is the
name of the printer you added to <em>CUPS</em>.</li>
</ol>
<p>If you can’t establish a connection then check your firewall
settings.</p>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_virtualbox.html'>virtualbox</a>, <a href='tag_printing.html'>printing</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/printing-from-virtualbox30746.html</link>
<guid>http://www.szumowski.org/./printing-from-virtualbox30746.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Wed, 09 Aug 2023 17:42:45 -0400</pubDate></item>
<item><title>
Installing and Using sbotools in Slackware 15.0
</title><description><![CDATA[
<p>Slackware was the first Linux distribution that I ever used but I was
always curious and did a lot of distro-hopping from Slackware, Caldera,
Turbo Linux, Mandrake, Red Hat, Ubuntu, multiple Ubuntu derivatives,
then Fedora for quite a while until I finally settled on…(drum roll
please)…Slackware! Yeah, I’ve come full circle.</p>
<p>One of the reasons why I was doing so much hopping around is that I
was never really happy with something about the distribution that I was
currently using. Maybe it was the default colors (Ubuntu, come on with
all of that orange stuff), choice of default software, difficulty with
setting it up. Whatever. With Slackware it was always the (lack of) a
decent package management system. That is until I found “sbotools”.</p>
<p>Yeah, slackpkg is there. So are a few others, like (list a few of
them here). But the lack of a distribution that didn’t have dependency
management in its package manager is a real pain in the backside.</p>
<p>So what’s the big deal? Well, one of the points of running Slackware
is installing packages that you choose to install and not letting the
package manager run amuck and automatically select and install a full
list of dependencies without letting the user know what they are and
what they do. That’s where sbotools comes in.</p>
<p>Klaatu talks about <a
href="https://pink-mist.github.io/sbotools/">sbotools</a> in his Gnu
World Order Episode <a
href="https://gnuworldorder.info/audiophile/gnuWorldOrder_473_ogg.ogg">473</a>
so you can find more information about it in his review.</p>
<p>As sbotools is highly influenced by FreeBSD’s ports system and its
pkgtools, the interface will be more or less familiar to anyone familiar
with portupgrade, etc.</p>
<p>When you use sbotools it finds the dependencies for the software you
want to install and for each one, displays what it is, what it does, and
prompts you if you want to install it or not. Also, if the dependency
has optional parameters it asks you if you want to see them and gives
you a choice to modify them or not.</p>
<p>Now all of this is done in the console, which is another thing that I
like about sbotools. No fancy ncurses or GUI dialogs. Just a simple
console program which is handy if you’re using a <em>headless</em>
server.</p>
<p>Once you are done selecting your package and providing whatever
responses are required, sbotools downloads the Slackbuilds and the
source code from wherever it needs to and compiles the packages one by
one in the order required and installs them. If a compilation fails then
it asks you if you wish to continue or quit. Then you have the option to
try figuring out what went wrong but looking at the build logs or by
scrolling back on the console output.</p>
<p>The sbotools package is not a single program but a collection of
about a half a dozen programs that work very much like the BSD ports.
You have a tool to initialize and fetch the latest list of packages,
another to check to see if you need to update your locally installed
programs, another to search for them and one to install new
packages.</p>
<p>Installing sbotools is rather simple if you’re use to installing
packages by hand in Slackware. It comes as a tz package that you install
using the ‘installpkg’ command.</p>
<p>First you need to install the <a
href="https://pink-mist.github.io/sbotools/downloads//">sbotools</a>
package. Then you need to “sync” the SlackBuild repository to your
machine using the command:</p>
<blockquote>
<p><code># sbosnap fetch</code><br/></p>
</blockquote>
<p>This will create a <em>git repository</em> of all of the SlackBuilds
supported by this tool (which is a lot). Now you can use the
<em>sbofind</em> command to search for a package.</p>
<p>Next we will run <em>sbocheck</em> to see if there are any updates
since the last time. In this case since this is the first time we’re
using it we shouldn’t expect anything new. The example below shows the
results when you do have new results:</p>
<blockquote>
<p><code># sbocheck</code><br/>
<code>Updating SlackBuilds tree...</code><br/>
<code>Updating files: 100% (44404/44404), done.</code><br/>
<code>HEAD is now at 49808a413d 20230729.1 global branch merge.</code><br/>
<code>Checking for updated SlackBuilds...</code><br/> <code></code><br/>
<code>plexmediaserver 1.32.5.7328_2632c9d3a  &lt;  needs updating (1.32.5.7349_8f4248874 from SBo)</code><br/>
<code></code><br/>
<code>A copy of the above result is kept in /var/log/sbocheck.log</code><br/></p>
</blockquote>
<p>If the above command indicates that there are updates then you can
initiate an upgrade using the following command:</p>
<blockquote>
<p><code># sboupgrade --all</code><br/>
<code>Checking for updated SlackBuilds...</code><br/></p>
</blockquote>
<p>OK, so now your repository is set up. Let’s use it.</p>
<p>Suppose we want to find a software package that can read guitar
tabs:</p>
<blockquote>
<p><code># sbofind guitar</code><br/>
<code>SBo:    tuxguitar 1.5.1</code><br/>
<code>Path:   /usr/sbo/repo/audio/tuxguitar</code><br/>
<code></code><br/> <code>SBo:    guitarix 0.44.1</code><br/>
<code>Path:   /usr/sbo/repo/audio/guitarix</code><br/></p>
</blockquote>
<p>We received two results. Let’s query their details:</p>
<blockquote>
<p><code># sbofind -r guitarix</code><br/>
<code>SBo:    guitarix 0.44.1</code><br/>
<code>Path:   /usr/sbo/repo/audio/guitarix</code><br/>
<code>README:</code><br/>
<code>guitarix (virtual guitar amplifier for jack)</code><br/>
<code></code><br/>
<code>guitarix offers the range of sounds you would expect from a</code><br/>
<code>full-featured universal guitar-amp. You can get crisp clean-sounds,</code><br/>
<code>nice overdrive, fat distortion and a diversity of crazy sounds never</code><br/>
<code>heard before. Guitarix can be used as a standalone application, as</code><br/>
<code>LADSPA plugins, or as LV2 plugins.</code><br/> <code></code><br/>
<code>For 32-bit x86, a CPU with SSE instructions is required. For other</code><br/>
<code>architectures, SSE will be used if available.</code><br/>
<code></code><br/>
<code>meterbridge is an optional runtime dependency.</code><br/>
<code></code><br/>
<code>Starting with version 0.35.4, guitarix's 'Online presets' feature no</code><br/>
<code>longer requires webkitgtk. See README.online for more information.</code><br/>
<code></code><br/>
<code>This package uses POSIX filesystem capabilities to execute with</code><br/>
<code>elevated privileges (required for realtime audio processing). This</code><br/>
<code>may be considered a security/stability risk. Please read</code><br/>
<code>http://www.slackbuilds.org/caps/ for more information. To disable</code><br/>
<code>capabilities, pass SETCAP=no to the script.</code><br/>
<code></code><br/>
<code>root@slacker:~# sbofind -r tuxguitar</code><br/>
<code>SBo:    tuxguitar 1.5.1</code><br/>
<code>Path:   /usr/sbo/repo/audio/tuxguitar</code><br/>
<code>README:</code><br/>
<code>TuxGuitar is a multitrack guitar tablature editor and player written</code><br/>
<code>in Java-SWT. It can open GuitarPro, PowerTab, and TablEdit files.</code><br/></p>
</blockquote>
<p>Ah, looks like <em>tuxguitar</em> is the one we want. So let’s
install it:</p>
<blockquote>
<p><code># sboinstall tuxguitar</code><br/> <code></code><br/>
<code>This is a SlackBuild to repackage the Azul's Zulu build of OpenJDK that</code><br/>
<code>is compliant with the Java SE 8 standard.</code><br/>
<code></code><br/>
<code>Before installing this package please consider any other jdk's/jre's</code><br/>
<code>that you have already installed as they may cause conflicts with the</code><br/>
<code>PATH, JAVA_HOME and MANPATH variables.</code><br/>
<code></code><br/>
<code>After installing the package you will need to logout/reboot your machine</code><br/>
<code>as it will add files to the /etc/profile.d folder.</code><br/>
<code></code><br/>
<code>Note: zulu-openjdk8 does not have a browser plugin nor support for Java</code><br/>
<code>Network Launching Protocol (JNLP).</code><br/> <code></code><br/>
<code>Proceed with zulu-openjdk8? [y] n</code><br/></p>
</blockquote>
<p>I already have a different version of Java installed so I will skip
this part</p>
<blockquote>
<p><code>TuxGuitar is a multitrack guitar tablature editor and player written</code><br/>
<code>in Java-SWT. It can open GuitarPro, PowerTab, and TablEdit files.</code><br/>
<code></code><br/> <code>Proceed with tuxguitar? [y]</code><br/>
<code>tuxguitar added to install queue.</code><br/> <code></code><br/>
<code>Install queue: tuxguitar</code><br/> <code></code><br/>
<code>Are you sure you wish to continue? [y]</code><br/>
<code></code><br/>
<code>Slackware package /tmp/tuxguitar-1.5.1-x86_64-1_SBo.tgz created.</code><br/>
<code></code><br/> <code></code><br/>
<code>+==============================================================================</code><br/>
<code>| Installing new package /tmp/tuxguitar-1.5.1-x86_64-1_SBo.tgz</code><br/>
<code>+==============================================================================</code><br/>
<code></code><br/>
<code>Verifying package tuxguitar-1.5.1-x86_64-1_SBo.tgz.</code><br/>
<code>Installing package tuxguitar-1.5.1-x86_64-1_SBo.tgz:</code><br/>
<code>PACKAGE DESCRIPTION:</code><br/>
<code># tuxguitar (A Multitrack tablature editor and player)</code><br/>
<code>#</code><br/>
<code># TuxGuitar is a multitrack guitar tablature editor and player</code><br/>
<code># written in Java-SWT. It can open GuitarPro, PowerTab, and</code><br/>
<code># TablEdit files.</code><br/> <code>#</code><br/>
<code>Executing install script for tuxguitar-1.5.1-x86_64-1_SBo.tgz.</code><br/>
<code>Package tuxguitar-1.5.1-x86_64-1_SBo.tgz installed.</code><br/>
<code>Cleaning for tuxguitar-1.5.1...</code><br/>
<code>#</code><br/></p>
</blockquote>
<p>So, sboinstall will not install <em>any</em> package without telling
you first and it will describe what the packages does and if there are
any additional (optional or otherwise) command line parameters which it
will prompt you for.</p>
<p>Once you respond to the last prompt it will download and install (and
compile if necessary) all of the packages you requested. If it fails one
of the installations it will ask you if it should continue. If it
succeeds in installing all of the packages then you’re ready to start
using your software.</p>
<p>Each of the command line tools has it’s own manpage. Have fun!</p>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_slackware.html'>slackware</a>, <a href='tag_sbotools.html'>sbotools</a>, <a href='tag_slackbuilds.html'>slackbuilds</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/installing-and-using-sbotools-in-slackware-150.html</link>
<guid>http://www.szumowski.org/./installing-and-using-sbotools-in-slackware-150.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Tue, 08 Aug 2023 20:59:51 -0400</pubDate></item>
<item><title>
Sorting Stuff in the VIM Buffer
</title><description><![CDATA[
<p>Suppose I have a file that I am editing in <em>vim</em> with the
following contents:</p>
<blockquote>
<p><code>$ cat file.txt</code><br/> <code>Red 4</code><br/>
<code>Blue 3</code><br/> <code>Green 1</code><br/>
<code>Orange 7</code><br/> <code>Black 8</code><br/>
<code>Yellow 6</code><br/> <code>Purple 2</code><br/>
<code>White 5</code><br/></p>
</blockquote>
<p>If I want to sort this data in <em>vim</em>, the first thing to do is
to format it into columns using the <em>column</em> command:</p>
<blockquote>
<p><code>:%!column -t</code><br/></p>
</blockquote>
<p>Which will put the data in the following format:</p>
<blockquote>
<table>
<tbody>
<tr class="odd">
<td>Red</td>
<td>4</td>
</tr>
<tr class="even">
<td>Blue</td>
<td>3</td>
</tr>
<tr class="odd">
<td>Green</td>
<td>1</td>
</tr>
<tr class="even">
<td>Orange</td>
<td>7</td>
</tr>
<tr class="odd">
<td>Black</td>
<td>8</td>
</tr>
<tr class="even">
<td>Yellow</td>
<td>6</td>
</tr>
<tr class="odd">
<td>Purple</td>
<td>2</td>
</tr>
<tr class="even">
<td>White</td>
<td>5</td>
</tr>
</tbody>
</table>
</blockquote>
<p>Then we can sort on the 2nd column using the <em>sort</em>
command:</p>
<blockquote>
<p><code>:%!sort -k2nr</code><br/></p>
</blockquote>
<p>Which will update the buffer like this:</p>
<blockquote>
<table>
<tbody>
<tr class="odd">
<td>Black</td>
<td>8</td>
</tr>
<tr class="even">
<td>Orange</td>
<td>7</td>
</tr>
<tr class="odd">
<td>Yellow</td>
<td>6</td>
</tr>
<tr class="even">
<td>White</td>
<td>5</td>
</tr>
<tr class="odd">
<td>Red</td>
<td>4</td>
</tr>
<tr class="even">
<td>Blue</td>
<td>3</td>
</tr>
<tr class="odd">
<td>Purple</td>
<td>2</td>
</tr>
<tr class="even">
<td>Green</td>
<td>1</td>
</tr>
</tbody>
</table>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_vim.html'>vim</a>, <a href='tag_sort.html'>sort</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/sorting-stuff-in-the-vim-buffer26213.html</link>
<guid>http://www.szumowski.org/./sorting-stuff-in-the-vim-buffer26213.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 07 Aug 2023 16:40:42 -0400</pubDate></item>
</channel></rss>
