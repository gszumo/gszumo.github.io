<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>Gregg's MOTD</title><link>http://www.szumowski.org/index.html</link>
<description>Tips & Tricks that I've Encountered Over the Years...</description><language>en</language>
<lastBuildDate>Tue, 16 May 2023 22:08:37 -0400</lastBuildDate>
<pubDate>Tue, 16 May 2023 22:08:37 -0400</pubDate>
<atom:link href="http://www.szumowski.org/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Mastodon Automated Postings using the API
</title><description><![CDATA[

<p>You can post to Mastodon using their API using <code>cURL</code>.</p>

<h4>Create or Find Your Access Token</h4>

<p>Once you have a Mastodon account, you need your account's access token. The steps you need to get that:</p>

<ol>
<li>Sign into your Mastodon account</li>
<li>Click on In the <code>"Preferences"</code> link.</li>
<li>On the bottom left corner of that page, click the <code>"Development"</code> link.</li>
<li>On the <code>"Your Applications"</code> page, click the blue <code>NEW APPLICATION</code> button.</li>
<li>Give your application a name, and decide what kind of access you want to have when you connect to your account via the Mastodon API (i<code>read</code>, <code>write</code>, and <code>follow</code> are the defaults). You can always change this later.</li>
<li>At the bottom of the page, click the blue <code>SUBMIT</code> button.</li>
<li>You will be directed back to the <code>Your applications</code> page, but now you should see your application name. Click that.</li>
<li>In your application's page, there are three tokens. For this tutorial, you need the <code>Your access token</code> one.
    Note: if your access token is ever compromised, you can click regenerate, and your old access token will stop working, and you'll be shown a new one.</li>
</ol>

<h4>Post a Status Update using cURL</h4>

<p><br/>
<code> 
$ curl https://mastodon.sdf.org/api/v1/statuses -H 'Authorization: Bearer put-your-api-token-here' -F 'status=Hello, World'
</code> <br/> <br/></p>

<p>Tags: <a href='tag_curl.html'>curl</a>, <a href='tag_mastodon.html'>mastodon</a>, <a href='tag_api.html'>api</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/mastodon-automated-postings-using-the-api10012.html</link>
<guid>http://www.szumowski.org/./mastodon-automated-postings-using-the-api10012.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Tue, 16 May 2023 22:07:09 -0400</pubDate></item>
<item><title>
Mastodon Automated Postings using the API
</title><description><![CDATA[

<p>You can post to Mastodon using their API using <code>cURL</code>.</p>

<h2>Create or Find Your Access Token</h2>

<p>Once you have a Mastodon account, you need your account's access token. The steps you need to get that:</p>

<ol>
<li>Sign into your Mastodon account</li>
<li>Click on In the <code>"Preferences"</code> link.</li>
<li>On the bottom left corner of that page, click the <code>"Development"</code> link.</li>
<li>On the <code>"Your Applications"</code> page, click the blue <code>NEW APPLICATION</code> button.</li>
<li>Give your application a name, and decide what kind of access you want to have when you connect to your account via the Mastodon API (i<code>read</code>, <code>write</code>, and <code>follow</code> are the defaults). You can always change this later.</li>
<li>At the bottom of the page, click the blue <code>SUBMIT</code> button.</li>
<li>You will be directed back to the <code>Your applications</code> page, but now you should see your application name. Click that.</li>
<li>In your application's page, there are three tokens. For this tutorial, you need the <code>Your access token</code> one.
    Note: if your access token is ever compromised, you can click regenerate, and your old access token will stop working, and you'll be shown a new one.</li>
</ol>

<h2>Post a Status Update using cURL</h2>

<p><br/>
<code> 
$ curl https://mastodon.sdf.org/api/v1/statuses -H 'Authorization: Bearer put-your-api-token-here' -F 'status=Hello, World'
</code> <br/> <br/></p>

<p>Tags: <a href='tag_curl.html'>curl</a>, <a href='tag_mastodon.html'>mastodon</a>, <a href='tag_api.html'>api</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/mastodon-automated-postings-using-the-api.html</link>
<guid>http://www.szumowski.org/./mastodon-automated-postings-using-the-api.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Tue, 16 May 2023 22:04:55 -0400</pubDate></item>
<item><title>
Creating Passwordless SSH Keys
</title><description><![CDATA[

<p><br/>Create the key. Note those are two single quotes after the -N (for a blank passwd)
<br/>
<code> $ ssh-keygen -t rsa -b 4096 -N '' </code> <br/>
<br/>Copy it to the target server
<br/> <code> $ cat .ssh/id<em>rsa.pub | ssh username@192.168.1.123  'cat >> .ssh/authorized</em>keys' </code> <br/>
<br/>
Test it
<br/>
<code> 
$ ssh username@192.168.1.123
</code> <br/>
<br/></p>

<p>Tags: <a href='tag_ssh.html'>ssh</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/creating-passwordless-ssh-keys6962.html</link>
<guid>http://www.szumowski.org/./creating-passwordless-ssh-keys6962.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sun, 14 May 2023 22:14:46 -0400</pubDate></item>
<item><title>
SSH Directory Permissions Settings
</title><description><![CDATA[

<p>It is important to set the directory and file permissions for your ~/.ssh correctly. </p>

<p>Typically you want the permissions to be:</p>

<ul>
<li>.ssh directory: 700 (drwx------)</li>
<li>public key (.pub file): 644 (-rw-r--r--)</li>
<li>private key (id_rsa): 600 (-rw-------)</li>
<li>lastly your home directory should not be writeable by the group or others (at most 755 (drwxr-xr-x)).</li>
</ul>

<p><br/>For example, to set this permissions do:
<br/>
<code> $ chmod 700 ~/.ssh </code> <br/>
<code> $ chmod 600 ~/.ssh/* </code> <br/>
<code> $ chmod 644 ~/.ssh/*.pub </code> <br/>
<code> $ ls -ltr ~/.ssh/</code><br/></p>

<p>Tags: <a href='tag_ssh.html'>ssh</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/ssh-directory-permissions-settings10237.html</link>
<guid>http://www.szumowski.org/./ssh-directory-permissions-settings10237.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 13 May 2023 16:53:49 -0400</pubDate></item>
<item><title>
SSH Directory Permissions Settings
</title><description><![CDATA[

<p>It is important to set the directory and file permissions for your ~/.ssh correctly. </p>

<p>Typically you want the permissions to be:</p>

<ul>
<li>.ssh directory: 700 (drwx------)</li>
<li>public key (.pub file): 644 (-rw-r--r--)</li>
<li>private key (id_rsa): 600 (-rw-------)</li>
<li>lastly your home directory should not be writeable by the group or others (at most 755 (drwxr-xr-x)).</li>
</ul>

<p><br/>
<br/>
<code> $ chmod 700 ~/.ssh </code> <br/>
<code> $ chmod 600 ~/.ssh/* </code> <br/>
<code> $ chmod 644 ~/.ssh/*.pub </code> <br/>
<code> $ ls -ltr ~/.ssh/</code><br/></p>

<p>Tags: <a href='tag_ssh.html'>ssh</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/ssh-directory-permissions-settings.html</link>
<guid>http://www.szumowski.org/./ssh-directory-permissions-settings.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 13 May 2023 16:51:02 -0400</pubDate></item>
<item><title>
How To Use Github Tokens on the Command Line
</title><description><![CDATA[

<p>GitHubâ€™s access policy requires you to use tokens instead of username/password to update your repositories. </p>

<p>To adapt your existing local / cloned repos to token based auth:
<br/><code>$ git remote remove origin</code>
<br/><code>$ git remote add origin https://[TOKEN]@github.com/[USER]/[REPO]</code>
<br/><code>$ git push</code>
<br/><br/>
Clone repos using token based authentication (non public repos)</code>
<br/><code>$ git clone https://[username]:[token]@github.com/[accountname]/[reponame]</code>
<br/></p>

<p>Tags: <a href='tag_github.html'>github</a>, <a href='tag_tokens.html'>tokens</a>, <a href='tag_motd.html'>motd</a>, <a href='tag_cli.html'>cli</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/how-to-use-github-tokens-on-the-command-line1357.html</link>
<guid>http://www.szumowski.org/./how-to-use-github-tokens-on-the-command-line1357.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Fri, 12 May 2023 21:20:39 -0400</pubDate></item>
<item><title>
Sending Email from the Command Line
</title><description><![CDATA[

<h4>mutt Examples<br/></h4>

<p>Sending just a file attachment (-a) and an empty message body:<br/>
<br/><code>
$ mutt  -s "System logs" -a /opt/backup.sql -- user@example.com &lt; /dev/null
</code><br/><br/>
Sending a message body using redirection:<br/>
<br/><code>
$ mutt -s "Email subject" test@example.com &lt; email.html
</code><br/><br/>
Sending a file attachment along with a message body:<br/>
<br/><code>
$ echo $message | mutt -s "Subject" -a attachment.txt -- me@myemail.com
</code><br/><br/></p>

<h4>mailx Example:<br/></h4>

<p><br/><code>
$ echo "message body" | mail -s "subject" test@example.com
</code><br/><br/></p>

<p>Tags: <a href='tag_mail.html'>mail</a>, <a href='tag_mutt.html'>mutt</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/sending-email-from-the-command-line8566.html</link>
<guid>http://www.szumowski.org/./sending-email-from-the-command-line8566.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Thu, 11 May 2023 18:15:35 -0400</pubDate></item>
<item><title>
How to convert VirtualBox VDI to KVM qcow2
</title><description><![CDATA[

<p>It is easy to convert a VirtualBox VDI image to a KVM qcow2 file. You have to use the RAW file format as an intermediate.</p>

<p>Make sure the VirtualBox machine is shutdown.</p>

<ol>
<li>Convert the VDI to a raw disk image. <br/>
Note: VDIs are compressed and raw images are not, so you will need to leave enough disk space for entire uncompressed disk.<br/>
<br/><code>
$ VBoxManage clonehd --format RAW vm.vdi vm.img
</code><br/><br/></li>
<li>Then on your KVM host:
<br/><code>
$ qemu-img convert -f raw vm.img -O qcow2 vm.qcow2
</code><br/></li>
</ol>

<p>Tags: <a href='tag_virtualization.html'>virtualization</a>, <a href='tag_virtualbox.html'>virtualbox</a>, <a href='tag_kvm.html'>kvm</a>, <a href='tag_qcow2.html'>qcow2</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/h1how-to-convert-virtualbox-vdi-to-kvm-qcow2h1.html</link>
<guid>http://www.szumowski.org/./h1how-to-convert-virtualbox-vdi-to-kvm-qcow2h1.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Wed, 10 May 2023 17:07:58 -0400</pubDate></item>
<item><title>
How To Count All The Files Extension Recursively In Linux
</title><description><![CDATA[

<p>To count all the files by file extension recursively on the command line<br/><br/>
<code> $ find . -type f | sed -n 's/..*.//p' | sort | uniq -c </code><br/>
<code>     40 3g2</code><br/>
<code>      5 AVI</code><br/>
<code>     13 DS_Store</code><br/>
<code>     28 JPG</code><br/>
<code>     30 MOV</code><br/>
<code>    133 MP4</code><br/>
<code>     64 THM</code><br/>
<code>      1 docx</code><br/>
<code>     18 jpg</code><br/>
<code>      1 json</code><br/>
<code>      4 m3u</code><br/>
<code>     89 m4a</code><br/>
<code>      2 m4r</code><br/>
<code>    156 m4v</code><br/>
<code>     41 mkv</code><br/>
<code>    112 mov</code><br/>
<code>     38 mp3</code><br/>
<code>    587 mp4</code><br/>
<code>      1 nfo</code><br/>
<code>      2 osp</code><br/>
<code>     30 png</code><br/>
<code>      1 sh</code><br/>
<code>      4 srt</code><br/>
<code>      6 svg</code><br/>
<code>     10 torrent</code><br/>
<code>      6 txt</code><br/>
<code>      5 webm</code><br/>
<code>     10 zip</code><br/>
</code>
<br></p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a>, <a href='tag_find.html'>find</a>, <a href='tag_sed.html'>sed</a>, <a href='tag_sort.html'>sort</a>, <a href='tag_uniq.html'>uniq</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/how-to-count-all-the-files-extension-recursively-in-linux.html</link>
<guid>http://www.szumowski.org/./how-to-count-all-the-files-extension-recursively-in-linux.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Tue, 09 May 2023 22:00:54 -0400</pubDate></item>
<item><title>
Untar a Tarball to a Remote Directory
</title><description><![CDATA[

<p>Sometimes you may need to copy an entire directory structure to another system using the command line. Here is a quick way to do it using the tar command:</p>

<p><code> cat myfile.tgz | ssh user@host "tar xzf - -C /some/dir" </code><br></p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a>, <a href='tag_tar.html'>tar</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/untar-a-tarball-to-a-remote-directory5321.html</link>
<guid>http://www.szumowski.org/./untar-a-tarball-to-a-remote-directory5321.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 08 May 2023 18:44:08 -0400</pubDate></item>
</channel></rss>
