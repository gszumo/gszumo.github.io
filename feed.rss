<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>Gregg's MOTD</title><link>http://www.szumowski.org/index.html</link>
<description>Tips & Tricks that I've Encountered Over the Years...</description><language>en</language>
<lastBuildDate>Sun, 14 May 2023 22:16:10 -0400</lastBuildDate>
<pubDate>Sun, 14 May 2023 22:16:10 -0400</pubDate>
<atom:link href="http://www.szumowski.org/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Creating Passwordless SSH Keys
</title><description><![CDATA[

<p><br/>Create the key. Note those are two single quotes after the -N (for a blank passwd)
<br/>
<code> $ ssh-keygen -t rsa -b 4096 -N '' </code> <br/>
<br/>Copy it to the target server
<br/> <code> $ cat .ssh/id<em>rsa.pub | ssh username@192.168.1.123  'cat >> .ssh/authorized</em>keys' </code> <br/>
<br/>
Test it
<br/>
<code> 
$ ssh username@192.168.1.123
</code> <br/>
<br/></p>

<p>Tags: <a href='tag_ssh.html'>ssh</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/creating-passwordless-ssh-keys6962.html</link>
<guid>http://www.szumowski.org/./creating-passwordless-ssh-keys6962.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sun, 14 May 2023 22:14:46 -0400</pubDate></item>
<item><title>
SSH Directory Permissions Settings
</title><description><![CDATA[

<p>It is important to set the directory and file permissions for your ~/.ssh correctly. </p>

<p>Typically you want the permissions to be:</p>

<ul>
<li>.ssh directory: 700 (drwx------)</li>
<li>public key (.pub file): 644 (-rw-r--r--)</li>
<li>private key (id_rsa): 600 (-rw-------)</li>
<li>lastly your home directory should not be writeable by the group or others (at most 755 (drwxr-xr-x)).</li>
</ul>

<p><br/>For example, to set this permissions do:
<br/>
<code> $ chmod 700 ~/.ssh </code> <br/>
<code> $ chmod 600 ~/.ssh/* </code> <br/>
<code> $ chmod 644 ~/.ssh/*.pub </code> <br/>
<code> $ ls -ltr ~/.ssh/</code><br/></p>

<p>Tags: <a href='tag_ssh.html'>ssh</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/ssh-directory-permissions-settings10237.html</link>
<guid>http://www.szumowski.org/./ssh-directory-permissions-settings10237.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 13 May 2023 16:53:49 -0400</pubDate></item>
<item><title>
SSH Directory Permissions Settings
</title><description><![CDATA[

<p>It is important to set the directory and file permissions for your ~/.ssh correctly. </p>

<p>Typically you want the permissions to be:</p>

<ul>
<li>.ssh directory: 700 (drwx------)</li>
<li>public key (.pub file): 644 (-rw-r--r--)</li>
<li>private key (id_rsa): 600 (-rw-------)</li>
<li>lastly your home directory should not be writeable by the group or others (at most 755 (drwxr-xr-x)).</li>
</ul>

<p><br/>
<br/>
<code> $ chmod 700 ~/.ssh </code> <br/>
<code> $ chmod 600 ~/.ssh/* </code> <br/>
<code> $ chmod 644 ~/.ssh/*.pub </code> <br/>
<code> $ ls -ltr ~/.ssh/</code><br/></p>

<p>Tags: <a href='tag_ssh.html'>ssh</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/ssh-directory-permissions-settings.html</link>
<guid>http://www.szumowski.org/./ssh-directory-permissions-settings.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 13 May 2023 16:51:02 -0400</pubDate></item>
<item><title>
How To Use Github Tokens on the Command Line
</title><description><![CDATA[

<p>GitHubâ€™s access policy requires you to use tokens instead of username/password to update your repositories. </p>

<p>To adapt your existing local / cloned repos to token based auth:
<br/><code>$ git remote remove origin</code>
<br/><code>$ git remote add origin https://[TOKEN]@github.com/[USER]/[REPO]</code>
<br/><code>$ git push</code>
<br/><br/>
Clone repos using token based authentication (non public repos)</code>
<br/><code>$ git clone https://[username]:[token]@github.com/[accountname]/[reponame]</code>
<br/></p>

<p>Tags: <a href='tag_github.html'>github</a>, <a href='tag_tokens.html'>tokens</a>, <a href='tag_motd.html'>motd</a>, <a href='tag_cli.html'>cli</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/how-to-use-github-tokens-on-the-command-line1357.html</link>
<guid>http://www.szumowski.org/./how-to-use-github-tokens-on-the-command-line1357.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Fri, 12 May 2023 21:20:39 -0400</pubDate></item>
<item><title>
Sending Email from the Command Line
</title><description><![CDATA[

<h4>mutt Examples<br/></h4>

<p>Sending just a file attachment (-a) and an empty message body:<br/>
<br/><code>
$ mutt  -s "System logs" -a /opt/backup.sql -- user@example.com &lt; /dev/null
</code><br/><br/>
Sending a message body using redirection:<br/>
<br/><code>
$ mutt -s "Email subject" test@example.com &lt; email.html
</code><br/><br/>
Sending a file attachment along with a message body:<br/>
<br/><code>
$ echo $message | mutt -s "Subject" -a attachment.txt -- me@myemail.com
</code><br/><br/></p>

<h4>mailx Example:<br/></h4>

<p><br/><code>
$ echo "message body" | mail -s "subject" test@example.com
</code><br/><br/></p>

<p>Tags: <a href='tag_mail.html'>mail</a>, <a href='tag_mutt.html'>mutt</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/sending-email-from-the-command-line8566.html</link>
<guid>http://www.szumowski.org/./sending-email-from-the-command-line8566.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Thu, 11 May 2023 18:15:35 -0400</pubDate></item>
<item><title>
How to convert VirtualBox VDI to KVM qcow2
</title><description><![CDATA[

<p>It is easy to convert a VirtualBox VDI image to a KVM qcow2 file. You have to use the RAW file format as an intermediate.</p>

<p>Make sure the VirtualBox machine is shutdown.</p>

<ol>
<li>Convert the VDI to a raw disk image. <br/>
Note: VDIs are compressed and raw images are not, so you will need to leave enough disk space for entire uncompressed disk.<br/>
<br/><code>
$ VBoxManage clonehd --format RAW vm.vdi vm.img
</code><br/><br/></li>
<li>Then on your KVM host:
<br/><code>
$ qemu-img convert -f raw vm.img -O qcow2 vm.qcow2
</code><br/></li>
</ol>

<p>Tags: <a href='tag_virtualization.html'>virtualization</a>, <a href='tag_virtualbox.html'>virtualbox</a>, <a href='tag_kvm.html'>kvm</a>, <a href='tag_qcow2.html'>qcow2</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/h1how-to-convert-virtualbox-vdi-to-kvm-qcow2h1.html</link>
<guid>http://www.szumowski.org/./h1how-to-convert-virtualbox-vdi-to-kvm-qcow2h1.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Wed, 10 May 2023 17:07:58 -0400</pubDate></item>
<item><title>
How To Count All The Files Extension Recursively In Linux
</title><description><![CDATA[

<p>To count all the files by file extension recursively on the command line<br/><br/>
<code> $ find . -type f | sed -n 's/..*.//p' | sort | uniq -c </code><br/>
<code>     40 3g2</code><br/>
<code>      5 AVI</code><br/>
<code>     13 DS_Store</code><br/>
<code>     28 JPG</code><br/>
<code>     30 MOV</code><br/>
<code>    133 MP4</code><br/>
<code>     64 THM</code><br/>
<code>      1 docx</code><br/>
<code>     18 jpg</code><br/>
<code>      1 json</code><br/>
<code>      4 m3u</code><br/>
<code>     89 m4a</code><br/>
<code>      2 m4r</code><br/>
<code>    156 m4v</code><br/>
<code>     41 mkv</code><br/>
<code>    112 mov</code><br/>
<code>     38 mp3</code><br/>
<code>    587 mp4</code><br/>
<code>      1 nfo</code><br/>
<code>      2 osp</code><br/>
<code>     30 png</code><br/>
<code>      1 sh</code><br/>
<code>      4 srt</code><br/>
<code>      6 svg</code><br/>
<code>     10 torrent</code><br/>
<code>      6 txt</code><br/>
<code>      5 webm</code><br/>
<code>     10 zip</code><br/>
</code>
<br></p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a>, <a href='tag_find.html'>find</a>, <a href='tag_sed.html'>sed</a>, <a href='tag_sort.html'>sort</a>, <a href='tag_uniq.html'>uniq</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/how-to-count-all-the-files-extension-recursively-in-linux.html</link>
<guid>http://www.szumowski.org/./how-to-count-all-the-files-extension-recursively-in-linux.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Tue, 09 May 2023 22:00:54 -0400</pubDate></item>
<item><title>
Untar a Tarball to a Remote Directory
</title><description><![CDATA[

<p>Sometimes you may need to copy an entire directory structure to another system using the command line. Here is a quick way to do it using the tar command:</p>

<p><code> cat myfile.tgz | ssh user@host "tar xzf - -C /some/dir" </code><br></p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a>, <a href='tag_tar.html'>tar</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/untar-a-tarball-to-a-remote-directory5321.html</link>
<guid>http://www.szumowski.org/./untar-a-tarball-to-a-remote-directory5321.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 08 May 2023 18:44:08 -0400</pubDate></item>
<item><title>
Gnome3 Menu Icons
</title><description><![CDATA[

<p>To add your own menu icons to a GNOME3 environment check out this link: 
<a href="https://developer.gnome.org/integration-guide/stable/desktop-files.html.en">Desktop files: putting your application in the desktop menus</a></p>

<p>Tags: <a href='tag_linux.html'>linux</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/gnome3-menu-icons11060.html</link>
<guid>http://www.szumowski.org/./gnome3-menu-icons11060.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sun, 07 May 2023 17:06:05 -0400</pubDate></item>
<item><title>
Getting Rid of ^M Line Endings in a Text File
</title><description><![CDATA[

<p>If you have a text file that has funny looking ^M characters at the end of each line, in most cases, you have to get rid of them before they can be used. This is especially the case when you've copied or transferred a file from a Windows-based system to a *nix-based one. If these files are shell scripts meant to run on the *nix-based system they more often than not won't work. There are various solutions to this problem.</p>

<p>First, let's create two text files: one with ^M line endings and one without:</p>

<p><code> $ for line in 1 2 3 4 5; do echo "This is line ${line}^M" >>file1.txt; done </code><br>
<code> $ for line in 1 2 3 4 5; do echo "This is line ${line}" >>file2.txt; done </code><br></p>

<p>Now let's see what's different between these two text files:</p>

<p><code> $ ls -l </code><br>
<code> total 8 </code><br>
<code> -rw-rw-r--. 1 gszumo gszumo 80 Oct 29 17:43 file1.txt </code><br>
<code> -rw-rw-r--. 1 gszumo gszumo 75 Oct 29 17:44 file2.txt </code><br></p>

<p><code> $ file file1.txt </code><br>
<code> file1.txt: ASCII text, with CRLF line terminators </code><br></p>

<p><code> $ file file2.txt </code><br>
<code> file2.txt: ASCII text </code><br></p>

<p><code> $ diff file1.txt file2.txt </code><br>
<code> 1,5c1,5 </code><br>
<code> &lt; This is line 1 </code><br>
<code> &lt; This is line 2 </code><br>
<code> &lt; This is line 3 </code><br>
<code> &lt; This is line 4 </code><br>
<code> &lt; This is line 5 </code><br>
<code> --- </code><br>
<code> > This is line 1 </code><br>
<code> > This is line 2 </code><br>
<code> > This is line 3 </code><br>
<code> > This is line 4 </code><br>
<code> > This is line 5 </code><br>
<code> $ </code><br></p>

<p>What does this tell us?</p>

<ul>
<li>The ls command tells us the file sizes are different even though the visible text is the same.</li>
<li>The file command tells us that both files are ASCII text  but file1.txt has CRLF line terminators, and</li>
<li>The diff command tells us that each line is indeed showing us that it's different.</li>
</ul>

<p>So, how do we fix this?</p>

<p>My favorite solution is to use vi or vim interactively. There are 2 easy ways to get rid of the ^M from a single file using vim:</p>

<ol>
<li>Enter the command:
<br><code> :%s/^M//g </code><br>
on the vim command line then save the file, or</li>
<li>Enter the command:
<br><code> :fileformat=unix </code><br>
on the vim command line and save the file.</li>
</ol>

<p>However, if you have a whole directory or directory tree full of these kinds of files using vim on each one individually will become quite tedious. For this you need the scripting capability of the command line!</p>

<p>The 'tr' command is one quick way of getting rid of them using the Linux or macOS command line:</p>

<p><code> cat somefile | tr -d '^M' >outputfile </code><br></p>

<p>We can use this as a template in order to determine whether or not the file needs to be updated:</p>

<p><code> for i in * </code><br>
<code> do </code><br>
<code>   string=$(file ${i}) </code><br>
<code>   test "${string#*'CRLF'}" != "$string" &amp;&amp; echo "CRLF found in ${i}" </code><br>
<code> done </code><br></p>

<p>If the 'echo' part of this snippet only gets called when the first part of the test is true, so then we know that the file has '^M' line endings. We have to turn the second part of the test into a script that will massage the file to remove the line endings. Here's a bash snippet that will put the two together and do the job:</p>

<p><code> for i in * </code><br>
<code> do </code><br>
<code>   string=$(file ${i}) </code><br>
<code>   if [ "${string#*'CRLF'}" != "$string" ];then </code><br>
<code>     cp ${i} ${i}.bak </code><br>
<code>     cat ${i}.bak|tr -d '^M' >${i} </code><br>
<code>     rm ${i}.bak </code><br>
<code>   fi </code><br>
<code> done </code><br></p>

<p>This is a bare-bones piece of code which doesn't do any error checking, which should be added in the event that the user running this script doesn't have the necessary permissions to copy, write or remove files that match the test.</p>

<p>Remember, in order to create a '^M' character in the terminal hold down the CTRL key while  typing vm.</p>

<p>You can also use 'ex' to replace a string in a file using:</p>

<p><code> ex -s -c '%s/old-str/new-str/g|x' filename.txt </code><br></p>

<p>Alternately, we can use sed to do the same thing. At the command line you can replace any string in a file dynamically by entering:</p>

<p><code> sed -i 's/old-str/new-str/' filename.txt </code><br></p>

<p>So to remove the ^M charaters just do:</p>

<p><code> sed -i 's/^M//' filename.txt </code><br></p>

<p>to remove the ^M characters. You can use the same for/do/done loop structure as mentioned above to iterate over multiple files:</p>

<p><code> for i in *.txt </code><br>
<code> do </code><br>
<code>   sed -i 's/^M//' ${i} </code><br>
<code> done </code><br></p>

<p>'Nuff said.</p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/getting-rid-of-m-line-endings-in-a-text-file20658.html</link>
<guid>http://www.szumowski.org/./getting-rid-of-m-line-endings-in-a-text-file20658.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 06 May 2023 13:37:12 -0400</pubDate></item>
</channel></rss>
