<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>Gregg's MOTD</title><link>http://www.szumowski.org/index.html</link>
<description>Tips & Tricks that I've Encountered Over the Years...</description><language>en</language>
<lastBuildDate>Fri, 05 May 2023 22:25:39 -0400</lastBuildDate>
<pubDate>Fri, 05 May 2023 22:25:39 -0400</pubDate>
<atom:link href="http://www.szumowski.org/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Removing ^M Characters From Multiple Files
</title><description><![CDATA[

<p>In my day job I find that I frequently need to remove those pesky '^M' line endings from text files that are transferred from one system to the other. Most of the time it is just one file that needs to be fixed so going into vi and typing</p>

<p><code> :%s/^M//g </code><br></p>

<p>solves the problem, but on occasion I might be confronted with performing this process on multiple files and sometimes recursively through many subdirectories. When that happens it becomes necessary to bring out the "big guns" and do:</p>

<p><code> $ for file in $(find /path/to/dir -type f); do </code><br>
<code>       tr -d '\r' <$file >temp.$$ &amp;&amp; mv temp.$$ $file </code><br>
<code>   done </code><br>
<code> $ </code><br></p>

<p>(BTW, to generate a ^M character using the PuTTY emulator is easy. Just press CTRL-^ followed by CTRL-M)</p>

<p>Of course, in Linux, UNIX and AIX shells there are many ways to skin a cat and this is just one of many possible solutions. This solution was found on <a href="https://dailyvim.blogspot.com">a Daily Vim Blogspot site</a> which has more very interesting tips &amp; tutorials.</p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/removing-m-characters-from-multiple-files19102.html</link>
<guid>http://www.szumowski.org/./removing-m-characters-from-multiple-files19102.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Fri, 05 May 2023 22:25:36 -0400</pubDate></item>
<item><title>
Get the Hash of a File on Different Operating Systems
</title><description><![CDATA[

<p>Sometimes you just need to hash something. Here are some command lines to do just that.</p>

<p>Windows PowerShell:</p>

<p><code> Get-FileHash C:\path\to\file.iso -Algorithm [MD5|SHA1|SHA256|SHA384|SHA512|MACTripleDES|RIPEMD160] </code><br></p>

<p>(SHA256 is the default if the parameter is omitted) </p>

<p>Linux: </p>

<p><code> md5sum /path/to/file </code><br>
<code> sha1sum /path/to/file </code><br>
<code> sha256sum /path/to/file </code><br></p>

<p>macOS:</p>

<p><code> MD5: md5 /path/to/file </code><br>
<code> SHA1: shasum /path/to/file or shasum -a 1 /path/to/file </code><br>
<code> SHA-256: shasum -a 256 /path/to/file </code><br></p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/get-the-hash-of-a-file-on-different-operating-systems17003.html</link>
<guid>http://www.szumowski.org/./get-the-hash-of-a-file-on-different-operating-systems17003.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Thu, 04 May 2023 18:29:20 -0400</pubDate></item>
<item><title>
Copy Entire Directory Structure Using Tar
</title><description><![CDATA[

<p>Sometimes you need to copy an entire directory structure to another location on the command line. Here is a quick way to do it using the tar command:</p>

<p><code> tar cf - * | ( cd /target; tar xfp -) </code><br></p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/copy-entire-directory-structure-using-tar3546.html</link>
<guid>http://www.szumowski.org/./copy-entire-directory-structure-using-tar3546.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Wed, 03 May 2023 18:13:27 -0400</pubDate></item>
<item><title>
Fixing Screen Resolution on Second Monitor in Linux
</title><description><![CDATA[

<p>I recently installed a 2nd hard drive in my Macbook Pro dedicated to Linux. When I hooked up a secondary monitor to it I found that I could not get a reasonable resolution. After some research I found that I can add a new mode to the "Display" choices by entering the following in a terminal console:</p>

<p><code> xrandr </code> # to find the device name <br>
<code> cvt 1920 1080 </code> # to generate the mode for the xrandr program. <br>
<code> xrandr --newmode "1920x1080<em>60.00" 173.00 1920 2048 2248 2576 1080 1083 1088 1120 -hsync +vsync </code> # to add the new mode to the monitor choices. <br>
<code>xrandr --addmode DP1 1920x1080</em>60.00 </code> # to associate the new mode to the monitor.   <br></p>

<p>Tags: <a href='tag_linux.html'>linux</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/fixing-screen-resolution-on-second-monitor-in-linux4621.html</link>
<guid>http://www.szumowski.org/./fixing-screen-resolution-on-second-monitor-in-linux4621.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Tue, 02 May 2023 18:16:35 -0400</pubDate></item>
<item><title>
Sort Directory by File Size
</title><description><![CDATA[

<p>To sort files in a directory and to list them by the biggest file first:<br>
<code>
$ du -a | sort -n -r | more
</code>
<br>Alternatively you can use:<br>
<code>
$ du -s * | sort -n -r | more
</code>
<br></p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/sort-directory-by-file-size1118.html</link>
<guid>http://www.szumowski.org/./sort-directory-by-file-size1118.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 01 May 2023 22:15:27 -0400</pubDate></item>
<item><title>
Count Occurences of a Character in a String
</title><description><![CDATA[

<p>Sometimes I need to know how many times a specific character occurs in a string. The best tool to use for something like that is AWK. Let's say we're looking for the count of commas in a string:
<br>
<code>string="text,text,text,text" </code>
<br>
<code>char="," </code>
<br>
<code>echo "${string}" | awk -F"${char}" '{print NF-1}' </code>
<br>
Tags: cli,motd</p>

<!-- text end -->
]]></description><link>http://www.szumowski.org/count-occurences-of-a-character-in-a-string32529.html</link>
<guid>http://www.szumowski.org/./count-occurences-of-a-character-in-a-string32529.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sun, 30 Apr 2023 11:22:54 -0400</pubDate></item>
<item><title>
Talkin' Trash
</title><description><![CDATA[

<p>Having trouble getting the "Empty Trash" working in Thunar? Remove <code>"~/.config/xfce4/xfconf/xfce-perchannel-xml/thunar*"</code>.</p>

<p>Tags: <a href='tag_linux.html'>linux</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/talkin-trash19647.html</link>
<guid>http://www.szumowski.org/./talkin-trash19647.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 29 Apr 2023 11:29:11 -0400</pubDate></item>
<item><title>
Uptime Statistics for Windows
</title><description><![CDATA[

<p>To find the uptime for a Windows machine do</p>

<p><code>
C:&gt; net statistics server
</code></p>

<p>Tags: <a href='tag_windows.html'>windows</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/uptime-statistics-for-windows.html</link>
<guid>http://www.szumowski.org/./uptime-statistics-for-windows.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Tue, 25 Apr 2023 17:28:42 -0400</pubDate></item>
<item><title>
Alternative to Using cp
</title><description><![CDATA[

<p>To backup files from a source directory to a backup directory:
<code>
$ mkdir /path/to/backup/directory
$ cd $HOME/source/directory
$ tar cf - . | (cd /path/to/backup/directory &amp;&amp; tar xBvf -)
</code>
Define the following alias:</p>

<p><code>
tar cvf - . | ( cd \!* ; tar xvf - )
</code></p>

<p>or as an alias:</p>

<p><code>
alias cpbytar='tar cvf - . | ( cd \!* ; tar xvf - )'
</code>
(The alias definition above is for Bash)</p>

<p>To do a recursive copy of a directory to another location, preserving the PERMISSIONS and OWNERSHIP of the files.  "cd" to the source location and invoke the following alias:</p>

<p><code>
cpbytar
</code></p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/alternative-to-using-cp.html</link>
<guid>http://www.szumowski.org/./alternative-to-using-cp.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 24 Apr 2023 22:08:12 -0400</pubDate></item>
<item><title>
git Tips
</title><description><![CDATA[

<p>A useful tip to beautify your output is to use:
<code>
$ git log --graph --decorate --oneline --abbrev-commit --all --date=local
</code>
when looking at your log entries.
Or you can add
<code>
[alias]
</code>
<code>
   lola = log --graph --decorate --pretty=oneline --abbrev-commit --all --date=local
</code>
to your ~/.gitconfig file to use <code>$ git lola</code> as an alias.</p>

<p>Tags: <a href='tag_git.html'>git</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/git-tips.html</link>
<guid>http://www.szumowski.org/./git-tips.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 15 Apr 2023 13:37:14 -0400</pubDate></item>
</channel></rss>
