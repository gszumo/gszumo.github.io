<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>Gregg's MOTD</title><link>http://www.szumowski.org/index.html</link>
<description>Tips & Tricks that I've Encountered Over the Years...</description><language>en</language>
<lastBuildDate>Sun, 09 Jul 2023 16:49:08 -0400</lastBuildDate>
<pubDate>Sun, 09 Jul 2023 16:49:08 -0400</pubDate>
<atom:link href="http://www.szumowski.org/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Using Tar with a Text Input File
</title><description><![CDATA[
<p>If you have a lot of files in a directory and you only need to
<code>tar</code> a subset of them you can create a list of the files you
want in a text file and pass it to the <code>tar</code> command like
this:</p>
<blockquote>
<p><code>$ tar -cvf tarball.tar -T filelist.txt</code><br/></p>
</blockquote>
<p>or</p>
<blockquote>
<p><code>$ tar cvf tarball.tar $(cat filelist.txt)</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_tar.html'>tar</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/using-tar-with-a-text-input-file23818.html</link>
<guid>http://www.szumowski.org/./using-tar-with-a-text-input-file23818.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sun, 09 Jul 2023 16:49:03 -0400</pubDate></item>
<item><title>
Command Line Redirection
</title><description><![CDATA[
<p>Redirection is very significant in shell scripting. It provides you a
means to save the output of a command to a file or multiple files (one
for <code>stdout</code> and one for <code>stderr</code>).</p>
<p>Below is a table of simple redirections that are the most useful in
shell scripting. Here we are using the following naming conventions:</p>
<ul>
<li><code>stdout</code> – The output of the script/command</li>
<li><code>stderr</code> – The errors generated by the
script/command</li>
<li><code>outfile</code> – A target filename where you wish to store the
output</li>
<li><code>errfile</code> – A target filename where you wish to store the
errors</li>
</ul>
<blockquote>
<table>
<colgroup>
<col style="width: 29%" />
<col style="width: 70%" />
</colgroup>
<thead>
<tr class="header">
<th>Command</th>
<th>Description/Purpose</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>command 2&gt;errfile</td>
<td>Redirect stderr to errfile</td>
</tr>
<tr class="even">
<td>command &gt;outfile 2&gt;errfile</td>
<td>Redirect stderr to file named errfile and stdout to file named
outfile</td>
</tr>
<tr class="odd">
<td>command &amp;&gt; outfile</td>
<td>Redirect stderr and stdout to outfile</td>
</tr>
<tr class="even">
<td>command 2&gt;&amp;-</td>
<td>Just suppress error messages. No file created. No error message
displayed on screen</td>
</tr>
<tr class="odd">
<td>command 2&gt;&amp;1</td>
<td>Redirect error messages to standard output. Useful in shell script
when you need to forcefully display error messages on screen</td>
</tr>
</tbody>
</table>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_bash.html'>bash</a>, <a href='tag_scripting.html'>scripting</a>, <a href='tag_redirection.html'>redirection</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/command-line-redirection28985.html</link>
<guid>http://www.szumowski.org/./command-line-redirection28985.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 08 Jul 2023 10:25:10 -0400</pubDate></item>
<item><title>
Backup Files with Specific File Extension
</title><description><![CDATA[
<p>Here is how you can use <code>rsync</code> to backup only the
<em>.ogg</em> files in the <em>Music</em> directory to the <em>OGG</em>
directory:</p>
<blockquote>
<p><code>$ rsync -a --prune-empty-dirs --include='*/' --include='*.ogg' --exclude='*' Music/ OGG/</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_rsync.html'>rsync</a>, <a href='tag_backups.html'>backups</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/backup-files-with-specific-file-extension29561.html</link>
<guid>http://www.szumowski.org/./backup-files-with-specific-file-extension29561.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Fri, 07 Jul 2023 18:14:55 -0400</pubDate></item>
<item><title>
Some sed Tips
</title><description><![CDATA[
<p>Put an * between the number 5 and 6</p>
<blockquote>
<p><code>$ echo '12345678901234567890'| sed  -e 's/^.\{5\}/&amp;*/'</code><br/>
<code>12345*678901234567890</code><br/></p>
</blockquote>
<p>Put a comma between each number</p>
<blockquote>
<p><code>$ echo "1234567890" |sed  -e 's/./&amp;,/g' -e 's/,$//'</code><br/>
<code>1,2,3,4,5,6,7,8,9,0</code><br/></p>
</blockquote>
<p>Put comma after every 2, if not even then last number exist by
itself</p>
<blockquote>
<p><code>$ echo "1234567890" |sed  -e 's/../&amp;,/g' -e 's/,$//'</code><br/>
<code>12,34,56,78,90</code><br/></p>
</blockquote>
<p>Double space the data in file data1</p>
<blockquote>
<p><code>$ sed G data1</code><br/></p>
</blockquote>
<p>Triple space the data file file data1</p>
<blockquote>
<p><code>$ sed  'G;G' data1</code><br/></p>
</blockquote>
<p>Single space a double spaced file</p>
<blockquote>
<p><code>$ sed 'n;d' data1</code><br/></p>
</blockquote>
<p>DOS to Linux conversion</p>
<blockquote>
<p><code>$ sed 's/.$//' DOSfile &gt;Linuxfile</code><br/></p>
</blockquote>
<p>Truncate everything after a substring (‘with’ in this case):</p>
<blockquote>
<p><code>$ cat file.txt</code><br/>
<code>Brown Potatoes with Cheese</code><br/>
<code>Yellow Potatoes with Sugar and Cheese</code><br/>
<code>$ sed -i.bak 's/with.*//g' file.txt</code><br/>
<code>$ cat file.txt</code><br/> <code>Brown Potatoes</code><br/>
<code>Yellow Potatoes</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_sed.html'>sed</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/some-sed-tips27116.html</link>
<guid>http://www.szumowski.org/./some-sed-tips27116.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Thu, 06 Jul 2023 20:52:03 -0400</pubDate></item>
<item><title>
Slackware Current: Minimal Installation
</title><description><![CDATA[
<p>I’ve been looking for a way to install a minimal version of Slackware
(current) in a VM and the smallest that I’ve safely come up with so far
is this:</p>
<ul>
<li>Package group A</li>
<li>Package group AP</li>
<li>Package group D</li>
<li>Package group F</li>
<li>Package group K</li>
<li>Package group L</li>
<li>Package group N</li>
</ul>
<p>I will try to get it smaller but I need this startup environment for
another <em>experiment</em> so I’ll settle for this. Yes, it is still a
wopping 12GB. Geez…</p>
<p>More info <a
href="https://wiki.linuxquestions.org/wiki/Slackware-Minimal_Install">here</a></p>
<p>Tags: <a href='tag_slackware.html'>slackware</a>, <a href='tag_distros.html'>distros</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/slackware-current-minimal-installation26343.html</link>
<guid>http://www.szumowski.org/./slackware-current-minimal-installation26343.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Wed, 05 Jul 2023 18:57:49 -0400</pubDate></item>
<item><title>
Red Hat Subscription Service
</title><description><![CDATA[
<p>Once you have installed RHEL 9, register your RHEL subscription by
running the following command on the terminal. The username and password
are the login details to your Red Hat account.</p>
<blockquote>
<p><code>$ sudo subscription-manager register --username=username --password=password</code><br/></p>
</blockquote>
<p>To confirm that the system is registered to Red Hat Subscription
Management (RHSM), run the command:</p>
<blockquote>
<p><code>$ sudo subscription-manager list --installed</code><br/></p>
</blockquote>
<p>Then refresh and subscribe:</p>
<blockquote>
<p><code>$ sudo subscription-manager refresh</code><br/>
<code>$ sudo subscription-manager attach --auto</code><br/></p>
</blockquote>
<p>Or, list the subscriptions that are available:</p>
<blockquote>
<p><code>$ subscription-manager list --available --all</code><br/>
<code>$ subscription-manager attach --pool=&lt;POOL_ID&gt;</code><br/></p>
</blockquote>
<p>Unregistering a system:</p>
<blockquote>
<p><code>$ subscription-manager remove --all</code><br/>
<code>$ subscription-manager unregister</code><br/>
<code>$ subscription-manager clean</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_rhel.html'>rhel</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/red-hat-subscription-service27393.html</link>
<guid>http://www.szumowski.org/./red-hat-subscription-service27393.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Tue, 04 Jul 2023 11:18:03 -0400</pubDate></item>
<item><title>
Speed Up DNF Package Manager
</title><description><![CDATA[
<p>You can increase the download speed for installing packages using DNF
by updating the maximum number of simultaneous package downloads.</p>
<p>Start by editing the <code>/etc/dnf/dnf.conf</code> file:</p>
<blockquote>
<p><code>$ sudo nano /etc/dnf/dnf.conf</code><br/></p>
</blockquote>
<p>Add the following line to enable DNF parallel downloads:</p>
<blockquote>
<p><code>max_parallel_downloads=10</code><br/></p>
</blockquote>
<p>Another option is to select the fastest mirror from the Fedora public
mirrors by adding the following line:</p>
<blockquote>
<p><code>fastestmirror=True</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_dnf.html'>dnf</a>, <a href='tag_fedora.html'>fedora</a>, <a href='tag_rhel.html'>rhel</a>, <a href='tag_package-managers.html'>package-managers</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/speed-up-dnf-package-manager7346.html</link>
<guid>http://www.szumowski.org/./speed-up-dnf-package-manager7346.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 03 Jul 2023 17:28:52 -0400</pubDate></item>
<item><title>
Creating a Python requirements.txt File
</title><description><![CDATA[
<p>This can be done quickly by typing:</p>
<blockquote>
<p><code>$ pip freeze &gt;requirements.txt</code><br/></p>
</blockquote>
<p>at the command line.</p>
<p>To install packages using a <code>requirements</code> file just use
<code>pip</code>:</p>
<blockquote>
<p><code>$ pip install -r requirements.txt</code><br/></p>
</blockquote>
<p>To check if the packages in your <code>requirements.txt</code> file
are up-to-date use:</p>
<blockquote>
<p><code>$ pip list --outdated</code><br/></p>
</blockquote>
<p>and to update those packages:</p>
<blockquote>
<p><code>$ pip install -U &lt;packagename&gt;</code><br/></p>
</blockquote>
<p>This process has some drawbacks as packages are sometimes included
that are no longer needed and should only be used initially and then
maintained manually.</p>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_python.html'>python</a>, <a href='tag_pip.html'>pip</a>, <a href='tag_requirements.html'>requirements</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/creating-a-python-requirementstxt-file.html</link>
<guid>http://www.szumowski.org/./creating-a-python-requirementstxt-file.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sun, 02 Jul 2023 11:51:53 -0400</pubDate></item>
<item><title>
Python: Initializing a New Project using venv
</title><description><![CDATA[
<p>Start out by creating a new directory or cloning a repository (which
creates a directory) and <em>cd</em> into it:</p>
<blockquote>
<p><code>$ git clone https://gitlab.com/username/proj-name</code><br/>
<code>$ cd proj-name/</code><br/></p>
</blockquote>
<p>Initialize the virtual environment:</p>
<blockquote>
<p><code>$ python3 -m venv venv</code><br/>
<code>$ source venv/bin/activate</code><br/></p>
</blockquote>
<p>Install whatever dependencies you need:</p>
<blockquote>
<p><code>$ pip install package1 package2</code><br/></p>
</blockquote>
<p>Then develop and/or run your program:</p>
<blockquote>
<p><code>$ python data_model.py</code><br/>
<code>$ python app.py</code><br/>
<code>$ sqlite3 hpr.sqlite "select count(*) from users"</code><br/></p>
</blockquote>
<p>When you’re done working you can <em>deactivate</em> the environment
by typing:</p>
<blockquote>
<p><code>$ deactivate</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_python.html'>python</a>, <a href='tag_venv.html'>venv</a>, <a href='tag_virtual.html'>virtual</a>, <a href='tag_environment.html'>environment</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/python-initializing-a-new-project-using-venv.html</link>
<guid>http://www.szumowski.org/./python-initializing-a-new-project-using-venv.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 01 Jul 2023 20:07:47 -0400</pubDate></item>
<item><title>
Printing Numbers using Thousand Separators
</title><description><![CDATA[
<p>You can use a pipe to <code>awk</code> to output numbers with
thousands separators (commas). For Example, here’s how you can total the
5th column of the <code>ls -l</code> command and print it with thousands
separators:</p>
<blockquote>
<p><code>$ ls -l | awk '{total = total + $5}END{print total}' | LC_ALL=en_US.UTF-8 awk '{printf("%'"'"'d\n", $0) }'</code><br/>
<code>21,387</code><br/></p>
</blockquote>
<p>This can be adapted to other commands as necessary.</p>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_bash.html'>bash</a>, <a href='tag_awk.html'>awk</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/printing-numbers-using-thousand-separators.html</link>
<guid>http://www.szumowski.org/./printing-numbers-using-thousand-separators.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Fri, 30 Jun 2023 19:05:13 -0400</pubDate></item>
</channel></rss>
