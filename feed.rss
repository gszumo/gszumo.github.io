<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>Gregg's MOTD</title><link>http://www.szumowski.org/index.html</link>
<description>Tips & Tricks that I've Encountered Over the Years...</description><language>en</language>
<lastBuildDate>Mon, 28 Aug 2023 23:52:45 -0400</lastBuildDate>
<pubDate>Mon, 28 Aug 2023 23:52:45 -0400</pubDate>
<atom:link href="http://www.szumowski.org/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Slackware Kernel Upgrade (elilo)
</title><description><![CDATA[
<p>If you are using <code>elilo</code> with Slackware, after running the
<code>slackpkg --upgrade-all</code> script and you see that a new kernel
was installed, you need to run the following commands to move the latest
kernel to its proper location in order to boot:</p>
<blockquote>
<p><code>geninitrd</code><br/>
<code>cp /boot/vmlinuz-generic /boot/efi/EFI/Slackware/vmlinuz</code><br/>
<code>cp /boot/initrd.gz /boot/efi/EFI/Slackware/initrd.gz</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_slackware.html'>slackware</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/slackware-kernel-upgrade-elilo24510.html</link>
<guid>http://www.szumowski.org/./slackware-kernel-upgrade-elilo24510.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 28 Aug 2023 23:52:37 -0400</pubDate></item>
<item><title>
How to Change the UID or GID for a User or Group
</title><description><![CDATA[
<p>Let’s assume we have a user, Jane Doe, with the username of jdoe and
the <em>UID</em> of 1001 who we need to move to another <em>UID</em>
(for some reason or another).</p>
<p>First, change the <em>UID</em> of the user:</p>
<blockquote>
<p><code># usermod -u 3001 jdoe</code><br/></p>
</blockquote>
<p>Next, use search and change all file’s ownership owned by this
user:</p>
<blockquote>
<p><code># find / -user 1001 -exec chown -h jdoe {} \;</code><br/></p>
</blockquote>
<p>What if we need to change the <em>GID</em> of a group? Basically the
same process can be used. Let’s say we want to change the admins group’s
<em>GID</em> from 2001 to 4001.</p>
<p>First, change the <em>GID</em>:</p>
<blockquote>
<p><code># groupmod -g 4001 admins</code><br/></p>
</blockquote>
<p>Now, use search and change all file’s ownership owned by this
group:</p>
<blockquote>
<p><code># find / -group 2001 -exec chgrp -h admins {} \;</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_sysadmin.html'>sysadmin</a>, <a href='tag_uid.html'>uid</a>, <a href='tag_gid.html'>gid</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/how-to-change-the-uid-or-gid-for-a-user-or-group.html</link>
<guid>http://www.szumowski.org/./how-to-change-the-uid-or-gid-for-a-user-or-group.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sun, 27 Aug 2023 12:52:05 -0400</pubDate></item>
<item><title>
Netstat
</title><description><![CDATA[
<p>My most frequently used <code>netstat</code> command with parameters
for checking port (active internet) connections is:</p>
<blockquote>
<p><code>$ netstat -tulpn</code><br/></p>
</blockquote>
<p>You can also pipe the output to <code>grep</code> to filter for
specific ports or addresses.</p>
<p>Here is a brief listing of some of the many options:</p>
<blockquote>
<p><code>$ netstat [options]</code><br/></p>
</blockquote>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Option</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">-a</td>
<td>Display the state of all sockets, not just the active.</td>
</tr>
<tr class="even">
<td style="text-align: center;">-c</td>
<td>Continuously display information, updating every second.</td>
</tr>
<tr class="odd">
<td style="text-align: center;">-i</td>
<td>Include network device statistics.</td>
</tr>
<tr class="even">
<td style="text-align: center;">-n</td>
<td>Display all network addresses as numbers.</td>
</tr>
<tr class="odd">
<td style="text-align: center;">-o</td>
<td>Display additional information.</td>
</tr>
<tr class="even">
<td style="text-align: center;">-r</td>
<td>Display routing tables.</td>
</tr>
<tr class="odd">
<td style="text-align: center;">-t</td>
<td>Display only the TCP sockets.</td>
</tr>
<tr class="even">
<td style="text-align: center;">-u</td>
<td>Display only the UDP sockets.</td>
</tr>
<tr class="odd">
<td style="text-align: center;">-v</td>
<td>Print the netstat version number and exit.</td>
</tr>
<tr class="even">
<td style="text-align: center;">-w</td>
<td>List only the raw sockets.</td>
</tr>
<tr class="odd">
<td style="text-align: center;">-x</td>
<td>Display only the Unix sockets.</td>
</tr>
</tbody>
</table>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_networking.html'>networking</a>, <a href='tag_netstat.html'>netstat</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/netstat6800.html</link>
<guid>http://www.szumowski.org/./netstat6800.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 26 Aug 2023 16:35:30 -0400</pubDate></item>
<item><title>
Extracting Client Certificates
</title><description><![CDATA[
<p>You can display all of the server’s certificates using the following
command:</p>
<blockquote>
<p><code>$ openssl s_client -showcerts server.name:port | sed -n '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/p'</code><br/></p>
</blockquote>
<p>This output can be piped or copy/pasted to a text file (only keep the
parts between the <em>BEGIN</em> and <em>END CERTIFICATE</em> sections)
and give it a <code>.crt</code> file extension. You can then use it as
input to whatever client app needs it.</p>
<p>In the below example we pipe the <code>openssl</code> output to
<code>grep</code> to remove the identifiers of the certificates. You may
not get your <em>prompt</em> back until the command times out, so you
should wait a bit and after a bit you should get something similar to
the following output:</p>
<blockquote>
<p><code>$ openssl s_client -showcerts example.com:443 2&gt;&amp;1 |grep -v '^depth'| sed -n '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/p'</code><br/>
<code>-----BEGIN CERTIFICATE-----</code><br/>
<code>MIIHSjCCBjKgAwIBAgIQDB/LGEUYx+OGZ0EjbWtz8TANBgkqhkiG9w0BAQsFADBP</code><br/>
<code>MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMSkwJwYDVQQDEyBE</code><br/>
<code>aWdpQ2VydCBUTFMgUlNBIFNIQTI1NiAyMDIwIENBMTAeFw0yMzAxMTMwMDAwMDBa</code><br/>
<code>Fw0yNDAyMTMyMzU5NTlaMIGWMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZv</code><br/>
<code>cm5pYTEUMBIGA1UEBxMLTG9zIEFuZ2VsZXMxQjBABgNVBAoMOUludGVybmV0wqBD</code><br/>
<code>b3Jwb3JhdGlvbsKgZm9ywqBBc3NpZ25lZMKgTmFtZXPCoGFuZMKgTnVtYmVyczEY</code><br/>
<code>MBYGA1UEAxMPd3d3LmV4YW1wbGUub3JnMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A</code><br/>
<code>MIIBCgKCAQEAwoB3iVm4RW+6StkR+nutx1fQevu2+t0Fu6KBcbvhfyHSXy7w0nJO</code><br/>
<code>dTT4jWLjStpRkNQBPZwMwHH35i+21gdnJtDe/xfO8IX9McFmyodlBUcqX8CruIzD</code><br/>
<code>v9AXf2OjXPBG+4aq+03XKl5/muATl32++301Vw1dXoGYNeoWQqLTsHT3WS3tOOf+</code><br/>
<code>ehuzNuZ+rj+ephaD3lMBToEArrtC9R91KTTN6YSAOK48NxTA8CfOMFK5itxfIqB5</code><br/>
<code>+E9OSQTidXyqLyoeA+xxTKMqYfxvypEek1oueAhY9u67NCBdmuavxtfyvwp7+o6S</code><br/>
<code>d+NsewxAhmRKFexw13KOYzDhC+9aMJcuJQIDAQABo4ID2DCCA9QwHwYDVR0jBBgw</code><br/>
<code>FoAUt2ui6qiqhIx56rTaD5iyxZV2ufQwHQYDVR0OBBYEFLCTP+gXgv1ssrYXh8vj</code><br/>
<code>gP6CmwGeMIGBBgNVHREEejB4gg93d3cuZXhhbXBsZS5vcmeCC2V4YW1wbGUubmV0</code><br/>
<code>ggtleGFtcGxlLmVkdYILZXhhbXBsZS5jb22CC2V4YW1wbGUub3Jngg93d3cuZXhh</code><br/>
<code>bXBsZS5jb22CD3d3dy5leGFtcGxlLmVkdYIPd3d3LmV4YW1wbGUubmV0MA4GA1Ud</code><br/>
<code>DwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwgY8GA1Ud</code><br/>
<code>HwSBhzCBhDBAoD6gPIY6aHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0</code><br/>
<code>VExTUlNBU0hBMjU2MjAyMENBMS00LmNybDBAoD6gPIY6aHR0cDovL2NybDQuZGln</code><br/>
<code>aWNlcnQuY29tL0RpZ2lDZXJ0VExTUlNBU0hBMjU2MjAyMENBMS00LmNybDA+BgNV</code><br/>
<code>HSAENzA1MDMGBmeBDAECAjApMCcGCCsGAQUFBwIBFhtodHRwOi8vd3d3LmRpZ2lj</code><br/>
<code>ZXJ0LmNvbS9DUFMwfwYIKwYBBQUHAQEEczBxMCQGCCsGAQUFBzABhhhodHRwOi8v</code><br/>
<code>b2NzcC5kaWdpY2VydC5jb20wSQYIKwYBBQUHMAKGPWh0dHA6Ly9jYWNlcnRzLmRp</code><br/>
<code>Z2ljZXJ0LmNvbS9EaWdpQ2VydFRMU1JTQVNIQTI1NjIwMjBDQTEtMS5jcnQwCQYD</code><br/>
<code>VR0TBAIwADCCAX8GCisGAQQB1nkCBAIEggFvBIIBawFpAHYA7s3QZNXbGs7FXLed</code><br/>
<code>tM0TojKHRny87N7DUUhZRnEftZsAAAGFq0gFIwAABAMARzBFAiEAqt+fK6jFdGA6</code><br/>
<code>tv0EWt9rax0WYBV4re9jgZgq0zi42QUCIEBh1yKpPvgX1BreE0wBUmriOVUhJS77</code><br/>
<code>KgF193fT2877AHcAc9meiRtMlnigIH1HneayxhzQUV5xGSqMa4AQesF3crUAAAGF</code><br/>
<code>q0gFnwAABAMASDBGAiEA12SUFK5rgLqRzvgcr7ZzV4nl+Zt9lloAzRLfPc7vSPAC</code><br/>
<code>IQCXPbwScx1rE+BjFawZlVjLj/1PsM0KQQcsfHDZJUTLwAB2AEiw42vapkc0D+Vq</code><br/>
<code>AvqdMOscUgHLVt0sgdm7v6s52IRzAAABhatIBV4AAAQDAEcwRQIhAN5bhHthoyWM</code><br/>
<code>J3CQB/1iYFEhMgUVkFhHDM/nlE9ThCwhAiAPvPJXyp7a2kzwJX3P7fqH5Xko3rPh</code><br/>
<code>CzRoXYd6W+QkCjANBgkqhkiG9w0BAQsFAAOCAQEAWeRK2KmCuppK8WMMbXYmdbM8</code><br/>
<code>dL7F9z2nkZL4zwYtWBDt87jW/Gz/E5YyzU/phySFC3SiwvYP9afYfXaKrunJWCtu</code><br/>
<code>AG+5zSTuxELFTBaFnTRhOSO/xo6VyYSpsuVBD0R415W5z9l0v1hP5xb/fEAwxGxO</code><br/>
<code>Ik3Lg2c6k78rxcWcGvJDoSU7hPb3U26oha7eFHSRMAYN8gfUxAi6Q2TF4j/arMVB</code><br/>
<code>r6Q36EJ2dPcTu0p9NlmBm8dE34lzuTNC6GDCTWFdEloQ9u//M4kUUOjWn8a5XCs1</code><br/>
<code>263t3Ta2JfKViqxpP5r+GvgVKG3qGFrC0mIYr0B4tfpeCY9T+cz4I6GDMSP0xg==</code><br/>
<code>-----END CERTIFICATE-----</code><br/>
<code>-----BEGIN CERTIFICATE-----</code><br/>
<code>MIIEvjCCA6agAwIBAgIQBtjZBNVYQ0b2ii+nVCJ+xDANBgkqhkiG9w0BAQsFADBh</code><br/>
<code>MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3</code><br/>
<code>d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD</code><br/>
<code>QTAeFw0yMTA0MTQwMDAwMDBaFw0zMTA0MTMyMzU5NTlaME8xCzAJBgNVBAYTAlVT</code><br/>
<code>MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxKTAnBgNVBAMTIERpZ2lDZXJ0IFRMUyBS</code><br/>
<code>U0EgU0hBMjU2IDIwMjAgQ0ExMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC</code><br/>
<code>AQEAwUuzZUdwvN1PWNvsnO3DZuUfMRNUrUpmRh8sCuxkB+Uu3Ny5CiDt3+PE0J6a</code><br/>
<code>qXodgojlEVbbHp9YwlHnLDQNLtKS4VbL8Xlfs7uHyiUDe5pSQWYQYE9XE0nw6Ddn</code><br/>
<code>g9/n00tnTCJRpt8OmRDtV1F0JuJ9x8piLhMbfyOIJVNvwTRYAIuE//i+p1hJInuW</code><br/>
<code>raKImxW8oHzf6VGo1bDtN+I2tIJLYrVJmuzHZ9bjPvXj1hJeRPG/cUJ9WIQDgLGB</code><br/>
<code>Afr5yjK7tI4nhyfFK3TUqNaX3sNk+crOU6JWvHgXjkkDKa77SU+kFbnO8lwZV21r</code><br/>
<code>eacroicgE7XQPUDTITAHk+qZ9QIDAQABo4IBgjCCAX4wEgYDVR0TAQH/BAgwBgEB</code><br/>
<code>/wIBADAdBgNVHQ4EFgQUt2ui6qiqhIx56rTaD5iyxZV2ufQwHwYDVR0jBBgwFoAU</code><br/>
<code>A95QNVbRTLtm8KPiGxvDl7I90VUwDgYDVR0PAQH/BAQDAgGGMB0GA1UdJQQWMBQG</code><br/>
<code>CCsGAQUFBwMBBggrBgEFBQcDAjB2BggrBgEFBQcBAQRqMGgwJAYIKwYBBQUHMAGG</code><br/>
<code>GGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBABggrBgEFBQcwAoY0aHR0cDovL2Nh</code><br/>
<code>Y2VydHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0R2xvYmFsUm9vdENBLmNydDBCBgNV</code><br/>
<code>HR8EOzA5MDegNaAzhjFodHRwOi8vY3JsMy5kaWdpY2VydC5jb20vRGlnaUNlcnRH</code><br/>
<code>bG9iYWxSb290Q0EuY3JsMD0GA1UdIAQ2MDQwCwYJYIZIAYb9bAIBMAcGBWeBDAEB</code><br/>
<code>MAgGBmeBDAECATAIBgZngQwBAgIwCAYGZ4EMAQIDMA0GCSqGSIb3DQEBCwUAA4IB</code><br/>
<code>AQCAMs5eC91uWg0Kr+HWhMvAjvqFcO3aXbMM9yt1QP6FCvrzMXi3cEsaiVi6gL3z</code><br/>
<code>ax3pfs8LulicWdSQ0/1s/dCYbbdxglvPbQtaCdB73sRD2Cqk3p5BJl+7j5nL3a7h</code><br/>
<code>qG+fh/50tx8bIKuxT8b1Z11dmzzp/2n3YWzW2fP9NsarA4h20ksudYbj/NhVfSbC</code><br/>
<code>EXffPgK2fPOre3qGNm+499iTcc+G33Mw+nur7SpZyEKEOxEXGlLzyQ4UfaJbcme6</code><br/>
<code>ce1XR2bFuAJKZTRei9AqPCCcUZlM51Ke92sRKw2Sfh3oius2FkOH6ipjv3U/697E</code><br/>
<code>A7sKPPcw7+uvTPyLNhBzPvOk</code><br/>
<code>-----END CERTIFICATE-----</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_certificates.html'>certificates</a>, <a href='tag_openssl.html'>openssl</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/extracting-client-certificates237.html</link>
<guid>http://www.szumowski.org/./extracting-client-certificates237.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Fri, 25 Aug 2023 17:20:00 -0400</pubDate></item>
<item><title>
Use the zdump Command to Check Daylight Savings Time Settings
</title><description><![CDATA[
<p>If you are one of us <em>lucky</em> folks who live in timezones that
observe <em>Daylight Savings Time</em>, you can use the
<code>zdump</code> timezone dumper command to view your server’s
settings for same. This command prints the current time in each timezone
provided on the command line.</p>
<p>You can use <code>grep</code> to reduce the output to just the lines
that reference the current year:</p>
<blockquote>
<p><code>$ zdump -v EST5EDT |grep '2023'</code><br/>
<code>EST5EDT  Sun Mar 12 06:59:59 2023 UT = Sun Mar 12 01:59:59 2023 EST isdst=0 gmtoff=-18000</code><br/>
<code>EST5EDT  Sun Mar 12 07:00:00 2023 UT = Sun Mar 12 03:00:00 2023 EDT isdst=1 gmtoff=-14400</code><br/>
<code>EST5EDT  Sun Nov  5 05:59:59 2023 UT = Sun Nov  5 01:59:59 2023 EDT isdst=1 gmtoff=-14400</code><br/>
<code>EST5EDT  Sun Nov  5 06:00:00 2023 UT = Sun Nov  5 01:00:00 2023 EST isdst=0 gmtoff=-18000</code><br/></p>
</blockquote>
<p>You can also run the same command by location:</p>
<blockquote>
<p><code>$ zdump -v /usr/share/zoneinfo/America/New_York|grep '2023'</code><br/>
<code>/usr/share/zoneinfo/America/New_York  Sun Mar 12 06:59:59 2023 UT = Sun Mar 12 01:59:59 2023 EST isdst=0 gmtoff=-18000</code><br/>
<code>/usr/share/zoneinfo/America/New_York  Sun Mar 12 07:00:00 2023 UT = Sun Mar 12 03:00:00 2023 EDT isdst=1 gmtoff=-14400</code><br/>
<code>/usr/share/zoneinfo/America/New_York  Sun Nov  5 05:59:59 2023 UT = Sun Nov  5 01:59:59 2023 EDT isdst=1 gmtoff=-14400</code><br/>
<code>/usr/share/zoneinfo/America/New_York  Sun Nov  5 06:00:00 2023 UT = Sun Nov  5 01:00:00 2023 EST isdst=0 gmtoff=-18000</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_zdump.html'>zdump</a>, <a href='tag_timezones.html'>timezones</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/use-the-zdump-command-to-check-daylight-savings-time-settings.html</link>
<guid>http://www.szumowski.org/./use-the-zdump-command-to-check-daylight-savings-time-settings.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Thu, 24 Aug 2023 18:24:59 -0400</pubDate></item>
<item><title>
Logging to the System Logger in Bash
</title><description><![CDATA[
<p>If you are writing a shell script and want any messages to appear in
the system logger you can just use the <code>logger</code> command to do
this.</p>
<p>Here is an example on my Slackware system:</p>
<blockquote>
<p><code>$ logger -t TEST "This is a test message"</code><br/>
<code>$ cat /var/log/messages</code><br/>
<code>cat: /var/log/messages: Permission denied</code><br/>
<code>$ su -</code><br/> <code>Password:</code><br/>
<code># cat /var/log/messages</code><br/>
<code>Aug 23 17:44:47 slackbook TEST: This is a test message</code><br/></p>
</blockquote>
<p>You can also log to <em>systemd</em> by providing a parameter to
<em>logger</em>:</p>
<blockquote>
<p><code>logger --journald &lt;&lt;end</code><br/>
<code>MESSAGE_ID=67feb6ffbaf24c5cbec13c008dd72309</code><br/>
<code>MESSAGE=The dogs bark, but the caravan goes on.</code><br/>
<code>DOGS=bark</code><br/> <code>CARAVAN=goes on</code><br/>
<code>end</code><br/></p>
</blockquote>
<p>or you can optionally provide a file whose contents will be
logged:</p>
<blockquote>
<p><code>logger --journald=entry.txt</code><br/></p>
</blockquote>
<p>See the <em>logger</em> manpage for additional information.</p>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_logging.html'>logging</a>, <a href='tag_systemd.html'>systemd</a>, <a href='tag_logger.html'>logger</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/logging-to-the-system-logger-in-bash17599.html</link>
<guid>http://www.szumowski.org/./logging-to-the-system-logger-in-bash17599.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Wed, 23 Aug 2023 18:01:59 -0400</pubDate></item>
<item><title>
Encrypting Files using OpenSSL
</title><description><![CDATA[
<p>Let’s say we have a file that contains sensitive information and we
want to encyrpt it. You can encrypt a file very easily using the
<code>openssl</code> command:</p>
<blockquote>
<p><code>$ cat secret.txt</code><br/>
<code>This file contains some very secret stuff</code><br/>
<code>$ openssl enc -e -aes-256-cbc -pbkdf2 -a -salt -in secret.txt -out secret.enc</code><br/>
<code>enter aes-256-cbc encryption password: &lt;enter-a-password&gt;</code><br/>
<code>Verifying - enter aes-256-cbc encryption password:  &lt;enter-a-password&gt;</code><br/>
<code>$ cat secret.enc</code><br/>
<code>U2FsdGVkX19Rnz48WjLeljd19wvNOhQy+zzYwxCANezCTkqpGMl9zs4HdwdUzZjl</code><br/>
<code>VQkUsCJ7b0rUpRi83UlcwA==</code><br/></p>
</blockquote>
<p>Now we decrypt it (output to a different file). Make sure you enter
the same password that you input above:</p>
<blockquote>
<p><code>$ openssl enc -d -aes-256-cbc -pbkdf2 -a -salt -in secret.enc -out unencrypted-secret.txt</code><br/>
<code>enter aes-256-cbc decryption password:  &lt;enter-a-password&gt;</code><br/>
<code>$ cat unencrypted-secret.txt</code><br/>
<code>This file contains some very secret stuff</code><br/>
<code>$</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_openssl.html'>openssl</a>, <a href='tag_encryption.html'>encryption</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/encrypting-files-using-openssl23222.html</link>
<guid>http://www.szumowski.org/./encrypting-files-using-openssl23222.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Tue, 22 Aug 2023 19:18:26 -0400</pubDate></item>
<item><title>
Finding the SSL Directory on a Server
</title><description><![CDATA[
<p>I’ve had situations where I was configuring a secure connection to an
application and needed to know where the SSL certificates are stored on
the server. You can easily find out this information using the
<code>openssl</code> and <code>grep</code> commands:</p>
<blockquote>
<p><code>$ openssl version -a | grep OPENSSLDIR</code><br/>
<code>OPENSSLDIR: "/etc/pki/tls"</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_ssl.html'>ssl</a>, <a href='tag_openssl.html'>openssl</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/finding-the-ssl-directory-on-a-server32368.html</link>
<guid>http://www.szumowski.org/./finding-the-ssl-directory-on-a-server32368.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 21 Aug 2023 19:17:05 -0400</pubDate></item>
<item><title>
Processing The Results of The Find Command
</title><description><![CDATA[
<p>As mentioned in the previous post, the find command searches for
files, but it has another very useful feature in that it can also
perform an action on the files it finds.</p>
<p>I am a <em>vim</em> user, and let’s assume that I want to find my
editor’s backup files in the current directory trees. These filesall end
with a tilda (~) character. We would use this command to search for
them:</p>
<blockquote>
<p><code>$ find . -name '*~'</code><br/> <code>./.buffer.un~</code><br/>
<code>./.find_buffer.txt.un~</code><br/>
<code>./.Tips.txt.un~</code><br/></p>
</blockquote>
<p>which results in a list of 3 files. All it takes to remove these
files is to add on a little to the end of the last command:</p>
<blockquote>
<p><code>$ find . -name '*~' -exec rm -i '{}' \;</code><br/></p>
</blockquote>
<p>Now, not only will this command find all the matching files in the
current directory tree, but it will also delete them.</p>
<p>The <code>-exec</code> parameter tells <code>find</code> to
<em>execute</em> the command that follows it on each result. The string
<code>{}</code> is replaced by the current file name being processed
everywhere it occurs in the arguments to the command. The
<code>{}</code> string is enclosed in single quotes to protect them from
interpretation as shell script punctuation. The <code>\;</code> sequence
indicates the end of the <code>-exec</code> argument.</p>
<p>See the manpage for more information.</p>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_find.html'>find</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/processing-the-results-of-the-find-command10607.html</link>
<guid>http://www.szumowski.org/./processing-the-results-of-the-find-command10607.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 19 Aug 2023 13:18:54 -0400</pubDate></item>
<item><title>
Using the Find Command to Search for Files
</title><description><![CDATA[
<p>One of the most useful and flexible GNU utilities is the
<em>find</em> command. Understanding how to use this command is very
important to make you Linux life more efficient.</p>
<p>The general syntax of the find command is:</p>
<blockquote>
<p><code>find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]</code><br/></p>
</blockquote>
<p>That looks like a lot, but most of the time you may only need 2
things:</p>
<blockquote>
<p><code>find [path] [expression]</code><br/></p>
</blockquote>
<p>where the <em>path</em> is a starting point or the top of a directory
tree to be searched, and <em>expression</em> is a property and value
pair of what you’re trying to find. This may be a file name, last access
time, last modification time, size, and/or ownership.</p>
<p>For example, if you’re looking for the file stdlib.h, use the
following command:</p>
<blockquote>
<p><code>find / -name stdlib.h</code><br/></p>
</blockquote>
<p>If you run this as a <em>normal</em> user, using <em>find</em> from
the <em>root</em> directory will often result in a lot of error messages
being output to the terminal because the <em>normal</em> user doesn’t
have access to view some of the directories in the search. Therefore you
may want to pipe the <em>stderr</em> output to <code>/dev/null</code> to
avoid seeing those messages. You can do that like this:</p>
<blockquote>
<p><code>find / -name stdlib.h 2&gt;/dev/null</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_find.html'>find</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/using-the-find-command-to-search-for-files28509.html</link>
<guid>http://www.szumowski.org/./using-the-find-command-to-search-for-files28509.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Fri, 18 Aug 2023 17:04:01 -0400</pubDate></item>
</channel></rss>
