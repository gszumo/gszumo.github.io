<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>Gregg's MOTD</title><link>http://www.szumowski.org/index.html</link>
<description>Tips & Tricks that I've Encountered Over the Years...</description><language>en</language>
<lastBuildDate>Mon, 08 May 2023 18:44:11 -0400</lastBuildDate>
<pubDate>Mon, 08 May 2023 18:44:11 -0400</pubDate>
<atom:link href="http://www.szumowski.org/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Untar a Tarball to a Remote Directory
</title><description><![CDATA[

<p>Sometimes you may need to copy an entire directory structure to another system using the command line. Here is a quick way to do it using the tar command:</p>

<p><code> cat myfile.tgz | ssh user@host "tar xzf - -C /some/dir" </code><br></p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a>, <a href='tag_tar.html'>tar</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/untar-a-tarball-to-a-remote-directory5321.html</link>
<guid>http://www.szumowski.org/./untar-a-tarball-to-a-remote-directory5321.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 08 May 2023 18:44:08 -0400</pubDate></item>
<item><title>
Gnome3 Menu Icons
</title><description><![CDATA[

<p>To add your own menu icons to a GNOME3 environment check out this link: 
<a href="https://developer.gnome.org/integration-guide/stable/desktop-files.html.en">Desktop files: putting your application in the desktop menus</a></p>

<p>Tags: <a href='tag_linux.html'>linux</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/gnome3-menu-icons11060.html</link>
<guid>http://www.szumowski.org/./gnome3-menu-icons11060.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sun, 07 May 2023 17:06:05 -0400</pubDate></item>
<item><title>
Getting Rid of ^M Line Endings in a Text File
</title><description><![CDATA[

<p>If you have a text file that has funny looking ^M characters at the end of each line, in most cases, you have to get rid of them before they can be used. This is especially the case when you've copied or transferred a file from a Windows-based system to a *nix-based one. If these files are shell scripts meant to run on the *nix-based system they more often than not won't work. There are various solutions to this problem.</p>

<p>First, let's create two text files: one with ^M line endings and one without:</p>

<p><code> $ for line in 1 2 3 4 5; do echo "This is line ${line}^M" >>file1.txt; done </code><br>
<code> $ for line in 1 2 3 4 5; do echo "This is line ${line}" >>file2.txt; done </code><br></p>

<p>Now let's see what's different between these two text files:</p>

<p><code> $ ls -l </code><br>
<code> total 8 </code><br>
<code> -rw-rw-r--. 1 gszumo gszumo 80 Oct 29 17:43 file1.txt </code><br>
<code> -rw-rw-r--. 1 gszumo gszumo 75 Oct 29 17:44 file2.txt </code><br></p>

<p><code> $ file file1.txt </code><br>
<code> file1.txt: ASCII text, with CRLF line terminators </code><br></p>

<p><code> $ file file2.txt </code><br>
<code> file2.txt: ASCII text </code><br></p>

<p><code> $ diff file1.txt file2.txt </code><br>
<code> 1,5c1,5 </code><br>
<code> &lt; This is line 1 </code><br>
<code> &lt; This is line 2 </code><br>
<code> &lt; This is line 3 </code><br>
<code> &lt; This is line 4 </code><br>
<code> &lt; This is line 5 </code><br>
<code> --- </code><br>
<code> > This is line 1 </code><br>
<code> > This is line 2 </code><br>
<code> > This is line 3 </code><br>
<code> > This is line 4 </code><br>
<code> > This is line 5 </code><br>
<code> $ </code><br></p>

<p>What does this tell us?</p>

<ul>
<li>The ls command tells us the file sizes are different even though the visible text is the same.</li>
<li>The file command tells us that both files are ASCII text  but file1.txt has CRLF line terminators, and</li>
<li>The diff command tells us that each line is indeed showing us that it's different.</li>
</ul>

<p>So, how do we fix this?</p>

<p>My favorite solution is to use vi or vim interactively. There are 2 easy ways to get rid of the ^M from a single file using vim:</p>

<ol>
<li>Enter the command:
<br><code> :%s/^M//g </code><br>
on the vim command line then save the file, or</li>
<li>Enter the command:
<br><code> :fileformat=unix </code><br>
on the vim command line and save the file.</li>
</ol>

<p>However, if you have a whole directory or directory tree full of these kinds of files using vim on each one individually will become quite tedious. For this you need the scripting capability of the command line!</p>

<p>The 'tr' command is one quick way of getting rid of them using the Linux or macOS command line:</p>

<p><code> cat somefile | tr -d '^M' >outputfile </code><br></p>

<p>We can use this as a template in order to determine whether or not the file needs to be updated:</p>

<p><code> for i in * </code><br>
<code> do </code><br>
<code>   string=$(file ${i}) </code><br>
<code>   test "${string#*'CRLF'}" != "$string" &amp;&amp; echo "CRLF found in ${i}" </code><br>
<code> done </code><br></p>

<p>If the 'echo' part of this snippet only gets called when the first part of the test is true, so then we know that the file has '^M' line endings. We have to turn the second part of the test into a script that will massage the file to remove the line endings. Here's a bash snippet that will put the two together and do the job:</p>

<p><code> for i in * </code><br>
<code> do </code><br>
<code>   string=$(file ${i}) </code><br>
<code>   if [ "${string#*'CRLF'}" != "$string" ];then </code><br>
<code>     cp ${i} ${i}.bak </code><br>
<code>     cat ${i}.bak|tr -d '^M' >${i} </code><br>
<code>     rm ${i}.bak </code><br>
<code>   fi </code><br>
<code> done </code><br></p>

<p>This is a bare-bones piece of code which doesn't do any error checking, which should be added in the event that the user running this script doesn't have the necessary permissions to copy, write or remove files that match the test.</p>

<p>Remember, in order to create a '^M' character in the terminal hold down the CTRL key while  typing vm.</p>

<p>You can also use 'ex' to replace a string in a file using:</p>

<p><code> ex -s -c '%s/old-str/new-str/g|x' filename.txt </code><br></p>

<p>Alternately, we can use sed to do the same thing. At the command line you can replace any string in a file dynamically by entering:</p>

<p><code> sed -i 's/old-str/new-str/' filename.txt </code><br></p>

<p>So to remove the ^M charaters just do:</p>

<p><code> sed -i 's/^M//' filename.txt </code><br></p>

<p>to remove the ^M characters. You can use the same for/do/done loop structure as mentioned above to iterate over multiple files:</p>

<p><code> for i in *.txt </code><br>
<code> do </code><br>
<code>   sed -i 's/^M//' ${i} </code><br>
<code> done </code><br></p>

<p>'Nuff said.</p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/getting-rid-of-m-line-endings-in-a-text-file20658.html</link>
<guid>http://www.szumowski.org/./getting-rid-of-m-line-endings-in-a-text-file20658.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 06 May 2023 13:37:12 -0400</pubDate></item>
<item><title>
Removing ^M Characters From Multiple Files
</title><description><![CDATA[

<p>In my day job I find that I frequently need to remove those pesky '^M' line endings from text files that are transferred from one system to the other. Most of the time it is just one file that needs to be fixed so going into vi and typing</p>

<p><code> :%s/^M//g </code><br></p>

<p>solves the problem, but on occasion I might be confronted with performing this process on multiple files and sometimes recursively through many subdirectories. When that happens it becomes necessary to bring out the "big guns" and do:</p>

<p><code> $ for file in $(find /path/to/dir -type f); do </code><br>
<code>       tr -d '\r' <$file >temp.$$ &amp;&amp; mv temp.$$ $file </code><br>
<code>   done </code><br>
<code> $ </code><br></p>

<p>(BTW, to generate a ^M character using the PuTTY emulator is easy. Just press CTRL-^ followed by CTRL-M)</p>

<p>Of course, in Linux, UNIX and AIX shells there are many ways to skin a cat and this is just one of many possible solutions. This solution was found on <a href="https://dailyvim.blogspot.com">a Daily Vim Blogspot site</a> which has more very interesting tips &amp; tutorials.</p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/removing-m-characters-from-multiple-files19102.html</link>
<guid>http://www.szumowski.org/./removing-m-characters-from-multiple-files19102.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Fri, 05 May 2023 22:25:36 -0400</pubDate></item>
<item><title>
Get the Hash of a File on Different Operating Systems
</title><description><![CDATA[

<p>Sometimes you just need to hash something. Here are some command lines to do just that.</p>

<p>Windows PowerShell:</p>

<p><code> Get-FileHash C:\path\to\file.iso -Algorithm [MD5|SHA1|SHA256|SHA384|SHA512|MACTripleDES|RIPEMD160] </code><br></p>

<p>(SHA256 is the default if the parameter is omitted) </p>

<p>Linux: </p>

<p><code> md5sum /path/to/file </code><br>
<code> sha1sum /path/to/file </code><br>
<code> sha256sum /path/to/file </code><br></p>

<p>macOS:</p>

<p><code> MD5: md5 /path/to/file </code><br>
<code> SHA1: shasum /path/to/file or shasum -a 1 /path/to/file </code><br>
<code> SHA-256: shasum -a 256 /path/to/file </code><br></p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/get-the-hash-of-a-file-on-different-operating-systems17003.html</link>
<guid>http://www.szumowski.org/./get-the-hash-of-a-file-on-different-operating-systems17003.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Thu, 04 May 2023 18:29:20 -0400</pubDate></item>
<item><title>
Copy Entire Directory Structure Using Tar
</title><description><![CDATA[

<p>Sometimes you need to copy an entire directory structure to another location on the command line. Here is a quick way to do it using the tar command:</p>

<p><code> tar cf - * | ( cd /target; tar xfp -) </code><br></p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/copy-entire-directory-structure-using-tar3546.html</link>
<guid>http://www.szumowski.org/./copy-entire-directory-structure-using-tar3546.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Wed, 03 May 2023 18:13:27 -0400</pubDate></item>
<item><title>
Fixing Screen Resolution on Second Monitor in Linux
</title><description><![CDATA[

<p>I recently installed a 2nd hard drive in my Macbook Pro dedicated to Linux. When I hooked up a secondary monitor to it I found that I could not get a reasonable resolution. After some research I found that I can add a new mode to the "Display" choices by entering the following in a terminal console:</p>

<p><code> xrandr </code> # to find the device name <br>
<code> cvt 1920 1080 </code> # to generate the mode for the xrandr program. <br>
<code> xrandr --newmode "1920x1080<em>60.00" 173.00 1920 2048 2248 2576 1080 1083 1088 1120 -hsync +vsync </code> # to add the new mode to the monitor choices. <br>
<code>xrandr --addmode DP1 1920x1080</em>60.00 </code> # to associate the new mode to the monitor.   <br></p>

<p>Tags: <a href='tag_linux.html'>linux</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/fixing-screen-resolution-on-second-monitor-in-linux4621.html</link>
<guid>http://www.szumowski.org/./fixing-screen-resolution-on-second-monitor-in-linux4621.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Tue, 02 May 2023 18:16:35 -0400</pubDate></item>
<item><title>
Sort Directory by File Size
</title><description><![CDATA[

<p>To sort files in a directory and to list them by the biggest file first:<br>
<code>
$ du -a | sort -n -r | more
</code>
<br>Alternatively you can use:<br>
<code>
$ du -s * | sort -n -r | more
</code>
<br></p>

<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/sort-directory-by-file-size1118.html</link>
<guid>http://www.szumowski.org/./sort-directory-by-file-size1118.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 01 May 2023 22:15:27 -0400</pubDate></item>
<item><title>
Count Occurences of a Character in a String
</title><description><![CDATA[

<p>Sometimes I need to know how many times a specific character occurs in a string. The best tool to use for something like that is AWK. Let's say we're looking for the count of commas in a string:
<br>
<code>string="text,text,text,text" </code>
<br>
<code>char="," </code>
<br>
<code>echo "${string}" | awk -F"${char}" '{print NF-1}' </code>
<br>
Tags: cli,motd</p>

<!-- text end -->
]]></description><link>http://www.szumowski.org/count-occurences-of-a-character-in-a-string32529.html</link>
<guid>http://www.szumowski.org/./count-occurences-of-a-character-in-a-string32529.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sun, 30 Apr 2023 11:22:54 -0400</pubDate></item>
<item><title>
Talkin' Trash
</title><description><![CDATA[

<p>Having trouble getting the "Empty Trash" working in Thunar? Remove <code>"~/.config/xfce4/xfconf/xfce-perchannel-xml/thunar*"</code>.</p>

<p>Tags: <a href='tag_linux.html'>linux</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/talkin-trash19647.html</link>
<guid>http://www.szumowski.org/./talkin-trash19647.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 29 Apr 2023 11:29:11 -0400</pubDate></item>
</channel></rss>
