<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>Gregg's MOTD</title><link>http://www.szumowski.org/index.html</link>
<description>Tips & Tricks that I've Encountered Over the Years...</description><language>en</language>
<lastBuildDate>Wed, 19 Jul 2023 19:26:36 -0400</lastBuildDate>
<pubDate>Wed, 19 Jul 2023 19:26:36 -0400</pubDate>
<atom:link href="http://www.szumowski.org/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
List TCP Connections Sorted By Host and Most Connections
</title><description><![CDATA[
<p>Assuming your system still has <em>netstat</em> installed (Slackware
15.0 does :^), you can summarize the TCP connections on you host using
the following command:</p>
<blockquote>
<p><code>$ netstat -ntu|awk '{print $5}'|cut -d: -f1 -s|sort|uniq -c|sort -nk1 -r</code><br/>
<code></code><br/> <code>3 52.50.230.xxx</code><br/>
<code>3 104.18.27.xxx</code><br/> <code>3 104.18.26.xxx</code><br/>
<code>2 205.166.94.xx</code><br/> <code>2 192.168.1.xx</code><br/>
<code>2 142.251.40.xxx</code><br/> <code>2 104.18.13.xx</code><br/>
<code>1 74.120.9.xxx</code><br/> <code>1 66.255.245.xxx</code><br/>
<code>1 54.154.65.xxx</code><br/> <code>1 52.96.182.xxx</code><br/>
<code>1 45.56.116.xxx</code><br/> <code>1 45.33.73.xxx</code><br/>
<code>1 34.117.65.xx</code><br/> <code>1 20.190.135.xx</code><br/>
<code>1 192.168.122.xxx</code><br/> <code>1 192.168.1.xx</code><br/>
<code>1 172.253.63.xxx</code><br/> <code>1 162.159.61.x</code><br/>
<code>1 162.125.21.x</code><br/> <code>1 142.251.40.xxx</code><br/>
<code>1 142.251.32.xxx</code><br/> <code>1 142.251.16.xxx</code><br/>
<code>1 127.0.0.x</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_networking.html'>networking</a>, <a href='tag_netstat.html'>netstat</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/list-tcp-connections-sorted-by-host-and-most-connections.html</link>
<guid>http://www.szumowski.org/./list-tcp-connections-sorted-by-host-and-most-connections.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Wed, 19 Jul 2023 19:02:37 -0400</pubDate></item>
<item><title>
Test If a Port is Open with Bash
</title><description><![CDATA[
<p>If netcat isn’t available on your machine and you don’t have the
priviledge to install it you can use this trick to test if a port is
open or not. It will throw a connection refused message if a port is
closed.</p>
<blockquote>
<p><code>$ : &lt;/dev/tcp/127.0.0.1/80</code><br/></p>
</blockquote>
<p>And you can use it in a script like this:</p>
<blockquote>
<p><code>(: &lt;/dev/tcp/127.0.0.1/80) &amp;&gt;/dev/null &amp;&amp; echo "OPEN" || echo "CLOSED"</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_networking.html'>networking</a>, <a href='tag_bash.html'>bash</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/test-if-a-port-is-open-with-bash.html</link>
<guid>http://www.szumowski.org/./test-if-a-port-is-open-with-bash.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Tue, 18 Jul 2023 18:20:32 -0400</pubDate></item>
<item><title>
Recover Your Wi-Fi Password from Windows CLI
</title><description><![CDATA[
<p>In case you misplaced your wi-fi password you can recover it very
easily using 2 commands on Windoze:</p>
<p>Open the Terminal or PowerShell</p>
<blockquote>
<p><code>PS C:\Users\user&gt; netsh wlan show profile</code><br/></p>
</blockquote>
<p>The output will be similar to this. You need to obtain the <em>User
Profile</em> of the connection that you’re interested in:</p>
<blockquote>
<p><code>Profiles on interface Wi-Fi:</code><br/> <code></code><br/>
<code>Group policy profiles (read only)</code><br/>
<code>---------------------------------</code><br/>
<code>&lt;None&gt;</code><br/> <code></code><br/>
<code>User profiles</code><br/> <code>-------------</code><br/>
<code>All User Profile     : ROUTER21</code><br/>
<code>All User Profile     : 4YWD8-5G</code><br/>
<code>All User Profile     : 4YWD8</code><br/></p>
</blockquote>
<p>OK, so we know we have 3 profiles. Run the next command with the
profile you’re interested in:</p>
<blockquote>
<p><code>PS C:\Users\user&gt; netsh wlan show profile name="ROUTER21" key=clear</code><br/></p>
</blockquote>
<p>You’ll get a bunch of output, but what you’re interested in is the
field named <em>Key Content</em> in the <em>Security settings</em>
section which holds the wi-fi password in cleartext:</p>
<blockquote>
<p><code>Profile ROUTER21 on interface Wi-Fi:</code><br/>
<code>:</code><br/> <code>blah blah blah</code><br/> <code>:</code><br/>
<code>Connectivity settings</code><br/>
<code>---------------------</code><br/>
<code>Number of SSIDs        : 1</code><br/>
<code>SSID name              : "ROUTER21"</code><br/>
<code>Network type           : Infrastructure</code><br/>
<code>Radio type             : [ Any Radio Type ]</code><br/>
<code>Vendor extension          : Not present</code><br/>
<code></code><br/> <code>Security settings</code><br/>
<code>-----------------</code><br/>
<code>Authentication         : WPA2-Personal</code><br/>
<code>Cipher                 : CCMP</code><br/>
<code>Authentication         : WPA2-Personal</code><br/>
<code>Cipher                 : GCMP</code><br/>
<code>Security key           : Present</code><br/>
<code>Key Content            : mywifitpassword</code><br/>
<code>:</code><br/> <code>blah blah blah</code><br/> <code>:</code><br/>
<code>:</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_wi-fi.html'>wi-fi</a>, <a href='tag_networking.html'>networking</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/recover-your-wi-fi-password-from-windows-cli.html</link>
<guid>http://www.szumowski.org/./recover-your-wi-fi-password-from-windows-cli.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 17 Jul 2023 21:11:34 -0400</pubDate></item>
<item><title>
Prefix The Output of Any Command with a Timestamp
</title><description><![CDATA[
<p>You can prefix the output of every line with a timestamp by piping
the command to the following <em>sed</em> command:</p>
<blockquote>
<p><code>$ command | sed "s/^/\[</code>date
+“%Y%m%d%H%M%S”<code>]/"</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_sed.html'>sed</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/prefix-the-output-of-any-command-with-a-timestamp.html</link>
<guid>http://www.szumowski.org/./prefix-the-output-of-any-command-with-a-timestamp.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sun, 16 Jul 2023 15:19:01 -0400</pubDate></item>
<item><title>
Create a QEMU/KVM Virtual Machine from the Command Line
</title><description><![CDATA[
<p>You can use a combination of command line tools to create and
configure a virtual machine. Here we will use few tools from the
<em>QEMU</em> and <em>libvirt</em> packages to do this.</p>
<p>Use QEMU to create a 15GB QCOW disk image:</p>
<blockquote>
<p><code>$ qemu-img create -f qcow2 /home/user/KVM/CentOS-Stream-9.qcow2 15G</code><br/>
<code>Formatting '/home/user/KVM/CentOS-Stream-9.qcow2', fmt=qcow2 cluster_size=65536 extended_l2=off compression_type=zlib size=16106127360 lazy_refcounts=off refcount_bits=16</code><br/></p>
</blockquote>
<p>Start the installation:</p>
<blockquote>
<p><code>$ sudo virt-install --name=CentOS-Stream-9 --vcpus=1 --memory=1024 --location=/home/user/Downloads/CentOS-Stream-9-20230704.1-x86_64-boot.iso --os-variant=centos8 --network bridge:virbr0 --disk path=/home/user/KVM/CentOS-Stream-9.qcow2 --disk size=15</code><br/>
<code>Password:</code><br/>
<code>WARNING  Requested memory 1024 MiB is less than the recommended 1536 MiB for OS centos8</code><br/>
<code></code><br/> <code>Starting install...</code><br/>
<code>Retrieving 'vmlinuz'                                               |    0 B  00:00:00 ...</code><br/>
<code>Retrieving 'initrd.img'                                            |    0 B  00:00:00 ...</code><br/>
<code>Allocating 'CentOS-Stream-9.qcow2'                                 | 2.5 MB  00:00:03 ...</code><br/>
<code>WARNING  Overriding memory to 3072 MiB needed for centos8 network install.</code><br/>
<code>Creating domain...                                                 |    0 B  00:00:00</code><br/>
<code>Running graphical console command: virt-viewer --connect qemu:///system --wait CentOS-Stream-9</code><br/></p>
</blockquote>
<p>Once this gets to this point another window should open up by the
<code>virt-viewer</code> application (which you should install if you
didn’t already) and you can complete the installation and reboot. You’ll
use the same <code>virt-viewer</code> window to use the shell or desktop
(depending upon the distro you installed).</p>
<p>When you are done and close the <code>virt-viewer</code> GUI you can
find the VM in the <em>running</em> state using <code>virsh</code>:</p>
<blockquote>
<p><code>$ sudo virsh list --all</code><br/> <code>Password:</code><br/>
<code>Id   Name                State</code><br/>
<code>------------------------------------</code><br/>
<code>5    CentOS-Stream-9     running</code><br/>
<code>-    slackware-current   shut off</code><br/></p>
</blockquote>
<p>Then you can shut it down:</p>
<blockquote>
<p><code>$ sudo virsh shutdown 5</code><br/> <code>Password:</code><br/>
<code>Domain '5' is being shutdown</code><br/>
<code>$ sudo virsh list --all</code><br/> <code>Password:</code><br/>
<code>Id   Name                State</code><br/>
<code>------------------------------------</code><br/>
<code>-    CentOS-Stream-9     shut off</code><br/>
<code>-    slackware-current   shut off</code><br/></p>
</blockquote>
<p>Optionally, you can delete the VM domain and the QCOW file using the
<code>undefine</code> parameter:</p>
<blockquote>
<p><code>$ sudo virsh undefine --domain CentOS-Stream-9 --remove-all-storage</code><br/>
<code>Password:</code><br/>
<code>Domain 'CentOS-Stream-9' has been undefined</code><br/>
<code>Volume 'vda'(/home/user/KVM/CentOS-Stream-9.qcow2) removed.</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_qemu.html'>qemu</a>, <a href='tag_kvm.html'>kvm</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/create-a-qemukvm-virtual-machine-from-the-command-line.html</link>
<guid>http://www.szumowski.org/./create-a-qemukvm-virtual-machine-from-the-command-line.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Sat, 15 Jul 2023 12:52:32 -0400</pubDate></item>
<item><title>
Using passwordgen On Slackware
</title><description><![CDATA[
<p>The well known <a href="https://ss64.com">ss64.com</a> site has a lot
of useful tips and tricks for **nix* users and they also have a script
that you can download which will create and maintain passwords for
you.</p>
<p>If you go to their <a
href="https://ss64.com/pass/command-line.html">command line</a> section
you can use the link to their GitHub site and download it for yourself.
However, when I followed their installation instructions I ran into
difficulty because the script has a dependency on <code>pbcopy</code> or
<code>gclip</code> (which wasn’t documented) and since I run Slackware
15.0 the copy to clipboard feature failed.</p>
<p>The workaround for this is to install either <code>xclip</code> or
<code>xsel</code> from <em>Slackbuilds.org</em> and make a minor
modification to the script as described here:</p>
<blockquote>
<p><code>22c22,23</code><br/>
<code>&lt;     which gclip pbcopy | grep -v -m 1 'not found'</code><br/>
<code>---</code><br/>
<code>&gt;     which xclip xsel | grep -v -m 1 'not found'</code><br/>
<code>&gt;</code><br/> <code>52c53</code><br/>
<code>&lt;             ss64pwd_to_clipboard $one_arg</code><br/>
<code>---</code><br/>
<code>&gt;             ss64pwd_to_clipboard -selecton clipboard $one_arg</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_password-managers.html'>password-managers</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/using-passwordgen-on-slackware8846.html</link>
<guid>http://www.szumowski.org/./using-passwordgen-on-slackware8846.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Fri, 14 Jul 2023 18:44:55 -0400</pubDate></item>
<item><title>
Rename Files That Start With a Special Character
</title><description><![CDATA[
<p>Suppose you find that you have a file with a <em>special</em>
character and you want to delete it:</p>
<blockquote>
<p><code>$ ls</code><br/>
<code>-badfile.txt              PrintHood                   reg57.txt</code><br/>
<code>Favorites                 Recent                      scripts</code><br/>
<code></code><br/> <code>$ rm -badfile.txt</code><br/>
<code>rm: invalid option -- 'b'</code><br/>
<code>Try 'rm ./-badfile.txt' to remove the file '-badfile.txt'.</code><br/>
<code>Try 'rm --help' for more information.</code><br/>
<code></code><br/> <code>$ ls *.txt</code><br/>
<code>ls: invalid option -- 'e'</code><br/>
<code>Try 'ls --help' for more information.</code><br/></p>
</blockquote>
<p>First, find the <code>inode</code> of the file by using
<code>ls -i</code> on the command line:</p>
<blockquote>
<p><code>$ ls -i</code><br/>
<code>54804119 -badfile.txt                56634824 PrintHood</code><br/>
<code>56634825 Recent                      56634807 Favorites</code><br/>
<code>54804251 reg57.txt                   56634833 scripts</code><br/></p>
</blockquote>
<p>The “-i” flag will display the file’s inode:<br/> <em>54804119</em>
-badfile.txt</p>
<p>The inode for the “bad” file is <em>54804119</em>. Once the inode is
identified, use the find command to rename the file:</p>
<blockquote>
<p><code>$ find . -inum 54804119 -exec mv {} NewName \;</code><br/>
<code></code><br/> <code>$ ls NewName</code><br/>
<code>NewName</code><br/></p>
</blockquote>
<p>Now you can delete it.</p>
<blockquote>
<p><code>$ rm NewName</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_rename.html'>rename</a>, <a href='tag_find.html'>find</a>, <a href='tag_inode.html'>inode</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/rename-files-that-start-with-a-special-character22468.html</link>
<guid>http://www.szumowski.org/./rename-files-that-start-with-a-special-character22468.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Thu, 13 Jul 2023 18:39:20 -0400</pubDate></item>
<item><title>
scp’ing Files using a Text File List
</title><description><![CDATA[
<p>If you have a collection of files that you want to transfer to a
remote server and they are a subset of files in the current directory or
scattered among different directories you can create a list of files and
then pipe the list to <code>scp</code>:</p>
<blockquote>
<p><code>$ cat filelist.txt | xargs -i scp {} user@remote:~/backup/</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_xargs.html'>xargs</a>, <a href='tag_scp.html'>scp</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/scping-files-using-a-text-file-list.html</link>
<guid>http://www.szumowski.org/./scping-files-using-a-text-file-list.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Wed, 12 Jul 2023 18:10:28 -0400</pubDate></item>
<item><title>
How to recursively find the latest modified file in a directory
</title><description><![CDATA[
<blockquote>
<p><code>find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "</code><br/></p>
</blockquote>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_find.html'>find</a>, <a href='tag_sort.html'>sort</a>, <a href='tag_tail.html'>tail</a>, <a href='tag_cut.html'>cut</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/how-to-recursively-find-the-latest-modified-file-in-a-directory.html</link>
<guid>http://www.szumowski.org/./how-to-recursively-find-the-latest-modified-file-in-a-directory.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Tue, 11 Jul 2023 17:28:59 -0400</pubDate></item>
<item><title>
Bind to a Remote Port Using SSH
</title><description><![CDATA[
<p>If you are trying to access the web page of an application running on
a remote machine and you find that you are blocked, you can bind to it
using SSH with similar parameters to this:</p>
<blockquote>
<p><code>$ ssh pi@raspberrypi.local -L 8384:127.0.0.1:8384 -N</code><br/></p>
</blockquote>
<p>Where:</p>
<ul>
<li><code>pi@raspberrypi.local</code> is the remote server,</li>
<li><code>8384</code> is the port number on the remote that you wish to
connect with,</li>
<li><code>127.0.0.1:8384</code> is the local machine and the port that
you want to redirect to, and</li>
<li><code>-N</code> is a flag telling <code>ssh</code> not to execute a
remote command.</li>
</ul>
<p>Tags: <a href='tag_cli.html'>cli</a>, <a href='tag_ssh.html'>ssh</a>, <a href='tag_motd.html'>motd</a></p>
<!-- text end -->
]]></description><link>http://www.szumowski.org/bind-to-a-remote-port-using-ssh22839.html</link>
<guid>http://www.szumowski.org/./bind-to-a-remote-port-using-ssh22839.html</guid>
<dc:creator>Gregg Szumowski</dc:creator>
<pubDate>Mon, 10 Jul 2023 18:10:28 -0400</pubDate></item>
</channel></rss>
